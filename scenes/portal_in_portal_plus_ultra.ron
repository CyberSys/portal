(desc:(eng:"",rus:""),cam:(look_at:(0,0,0),alpha:-5.018782756629678,beta:1.5549760818481442,r:2.9408349370552473,offset_after_material:0.000004),uniforms:(ids:(available:[(25),(26),(27),(28),(32),(33),(34),(35),(36),(37),(38)],max:40),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Bool(true),"teleport_light"),(7):Inline(Bool(false)),(8):Named(Int((min:Some(0),max:None,value:20)),"subspace_degree"),(9):Named(Int((min:Some(0),max:None,value:14)),"show_teleported"),(10):Named(Bool(true),"filter_teleported"),(11):Inline(Angle(0)),(12):Named(Bool(true),"teleport_light_subspace"),(13):Inline(Formula(("((time * speed) % 1) * 2 * pi()"))),(14):Named(Float((min:Some(1),max:Some(1000),value:50)),"rod_size"),(15):Named(Bool(false),"enable_object"),(16):Inline(Formula((""))),(17):Inline(Formula(("2.0 - (time * 4)^(2. + time * 4)"))),(18):Inline(Formula(("0.85 - easing_in_out(time) * 1.3"))),(19):Inline(Bool(false)),(20):Inline(Bool(false)),(21):Named(Int((min:Some(0),max:None,value:4)),"subspace_detect_degree"),(22):Named(Bool(false),"use_patch_shape"),(23):Named(Bool(true),"enable_camera_object"),(24):Named(Bool(true),"enable_box"),(29):Named(Int((min:Some(0),max:Some(3),value:1)),"shape"),(30):Named(Formula(("0.035")),"border_size"),(31):Named(Formula(("0.01")),"black_border_size"),(39):Inline(Formula(("sin(pi())")))},storage_order:[(0),(1),(2),(6),(29),(30),(31),(8),(9),(10),(12),(14),(15),(21),(22),(23),(24)]),matrices:(ids:(available:[],max:43),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"a"),(14):Named(Simple(offset:(0,0,-0.95),scale:0.81,rotate:(0,0,0),mirror:(false,false,false)),"b0"),(15):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((14)))),"b1"),(16):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((15)))),"b2"),(17):Named(Mul(to:Some(((19))),what:Some(((18)))),"obj"),(18):Named(Simple(offset:(-0.44,0.45,1.05),scale:0.13,rotate:(0,1.5707963267948966,4.71238898038469),mirror:(false,false,false)),"obj_orig"),(19):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((14)))),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(20):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(21):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((17)))),"obj1"),(22):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((15))),what:Some(((17)))),"obj2"),(23):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((16))),what:Some(((17)))),"obj3"),(24):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(25):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((17))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(0.5))),(26):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((18))))),rotate:(x:No(4.71238898038469),y:No(4.71238898038469),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(0.8))),(27):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((28))),what:Some(((14)))),"teleport"),(28):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(29):Named(Simple(offset:(-1,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"patch1"),(30):Named(Simple(offset:(1,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"patch2"),(31):Inline(Simple(offset:(0,0,0.24),scale:1,rotate:(0.2792526803190927,0,0),mirror:(false,false,false))),(32):Named(Simple(offset:(0,1,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"patch3"),(33):Named(Simple(offset:(0,-1,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"patch4"),(34):Named(Simple(offset:(0,0,0),scale:0.91,rotate:(1.2217304763960306,3.6651914291880923,0),mirror:(false,false,false)),"patch5"),(35):Named(Mul(to:Some(((37))),what:Some(((36)))),"cam"),(36):Inline(Camera),(37):Inline(Simple(offset:(0,0,0),scale:0.1,rotate:(1.5707963267948966,0,0),mirror:(false,false,false))),(38):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((35)))),"cam1"),(39):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((15))),what:Some(((35)))),"cam2"),(40):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((16))),what:Some(((35)))),"cam3"),(41):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(42):Inline(Simple(offset:(0,0.16,0.31),scale:1,rotate:(4.71238898038469,5.427973973702365,0),mirror:(false,false,false)))},storage_order:[(0),(13),(14),(15),(16),(17),(18),(21),(22),(23),(27),(29),(30),(32),(33),(34),(35),(38),(39),(40)]),objects:(ids:(available:[],max:16),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("if (enable_box_u == 0) return NOT_INSIDE;\n\nreturn is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);")),in_subspace:Normal),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("if (enable_box_u == 0) return NOT_INSIDE;\n\nreturn is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);")),in_subspace:Normal),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("if (enable_box_u == 0) return NOT_INSIDE;\n\nreturn is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);")),in_subspace:Normal),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("if (enable_box_u == 0) return NOT_INSIDE;\n\nreturn is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);")),in_subspace:Normal),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("if (enable_box_u == 0) return NOT_INSIDE;\n\nreturn is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);")),in_subspace:Normal),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("if (enable_box_u == 0) return NOT_INSIDE;\n\nreturn is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);")),in_subspace:Normal),"room_z-"),(6):Named(Complex(kind:Simple(Some(((17)))),intersect:(("if (enable_object_u == 0) return scene_intersection_none;\n\nvec3 cube_size = vec3(1.0, rod_size_u, 1.0);\r\nSceneIntersection ihit = intersect_box(r, grid_gray_M, cube_size);\r\n\nvec4 pos = r.o + r.d * ihit.hit.t;\r\nif ((a_mat_inv * (obj_mat * pos)).z < 0.) ihit.hit.hit = false;\r\n\nreturn ihit;\r\n")),in_subspace:Normal),"object"),(7):Named(Complex(kind:Simple(Some(((20)))),intersect:(("if (enable_object_u == 0) { return scene_intersection_none; }\r\n\r\nSceneIntersection result = scene_intersection_none;\r\nSceneIntersection ihit = scene_intersection_none;\r\nRay transformed_ray;\r\nfloat len = 0.;\r\nRay r3;\r\nvec4 pos;\r\n\r\nvec3 cube_size = vec3(1.0, rod_size_u, 1.0);\r\nmat4 mat_transform = mat4(1.);\r\nmat4 mat_transform_inv = mat4(1.);\r\n\r\nfor (int i = 0; i < 1000; i++) { if (i >= subspace_degree_u) break; // !FOR_NUMBER!\r\nfor (int i = 0; i < subspace_degree_u; i++) { // !FOR_VARIABLE!\r\n    transformed_ray = transform(obj_mat_inv, transform(mat_transform_inv, r));\r\n    len = length(transformed_ray.d);\r\n    transformed_ray = normalize_ray(transformed_ray);\r\n    ihit = intersect_box(transformed_ray, grid_gray_M, cube_size);\r\n    ihit.hit.t /= len;\r\n    { // filtering by portal plane\r\n        r3 = transform(mat_transform_inv, r);\r\n        pos = r3.o + r3.d * ihit.hit.t;\r\n        if ((a_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n    }\r\n    if (nearer(result.hit, ihit.hit)) {\r\n        result = ihit;\r\n        result.hit.n = normalize((mat_transform * (obj_mat * vec4(ihit.hit.n, 0.))).xyz);\r\n    }\r\n\r\n    transformed_ray = transform(obj_mat_inv, transform(mat_transform, r));\r\n    len = length(transformed_ray.d);\r\n    transformed_ray = normalize_ray(transformed_ray);\r\n    ihit = intersect_box(transformed_ray, grid_gray_M, cube_size);\r\n    ihit.hit.t /= len;\r\n    { // filtering by portal plane\r\n        r3 = transform(mat_transform, r);\r\n        pos = r3.o + r3.d * ihit.hit.t;\r\n        if ((a_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n    }\r\n    if (nearer(result.hit, ihit.hit)) {\r\n        result = ihit;\r\n        result.hit.n = normalize((mat_transform_inv * (obj_mat * vec4(ihit.hit.n, 0.))).xyz);\r\n    }\r\n\r\n    mat_transform_inv = a_mat * (b0_mat_inv * mat_transform_inv);\r\n    mat_transform = b0_mat * (a_mat_inv * mat_transform);\r\n}\r\n\r\nreturn result;\r\n")),in_subspace:Subspace),"object_subspace"),(8):Named(Complex(kind:Simple(Some(((21)))),intersect:(("if (enable_object_u == 0) return scene_intersection_none;\n\nvec3 cube_size = vec3(1.0, rod_size_u, 1.0);\r\nSceneIntersection ihit = intersect_box(r, grid_gray_M, cube_size);\r\n\nvec4 pos = obj1_mat * (r.o + r.d * ihit.hit.t);\r\nif ((a_mat_inv * pos).z < 0.) ihit.hit.hit = false;\r\nif ((b0_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n\nreturn ihit;\r\n")),in_subspace:Normal),"object1"),(9):Named(Complex(kind:Simple(Some(((22)))),intersect:(("if (enable_object_u == 0) return scene_intersection_none;\n\nvec3 cube_size = vec3(1.0, rod_size_u, 1.0);\r\nSceneIntersection ihit = intersect_box(r, grid_gray_M, cube_size);\r\n\nvec4 pos = obj2_mat * (r.o + r.d * ihit.hit.t);\r\nif ((a_mat_inv * pos).z < 0.) ihit.hit.hit = false;\r\nif ((b0_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\nif ((b1_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n\nreturn ihit;\r\n")),in_subspace:Normal),"object2"),(10):Named(Complex(kind:Simple(Some(((23)))),intersect:(("if (enable_object_u == 0) return scene_intersection_none;\n\nvec3 cube_size = vec3(1.0, rod_size_u, 1.0);\r\nSceneIntersection ihit = intersect_box(r, grid_gray_M, cube_size);\r\n\nvec4 pos = obj3_mat * (r.o + r.d * ihit.hit.t);\r\nif ((a_mat_inv * pos).z < 0.) ihit.hit.hit = false;\r\nif ((b0_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\nif ((b1_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\nif ((b2_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n\nreturn ihit;\r\n")),in_subspace:Normal),"object3"),(11):Named(Complex(kind:Simple(Some(((35)))),intersect:(("if (enable_camera_object_u == 0) return scene_intersection_none;\n\nSceneIntersection ihit = intersect_eye_sphere(r);\r\n\nvec4 pos = r.o + r.d * ihit.hit.t;\r\nif ((a_mat_inv * (cam_mat * pos)).z < 0.) ihit.hit.hit = false;\r\n\nreturn ihit;\r\n")),in_subspace:Normal),"cam"),(12):Named(Complex(kind:Simple(Some(((41)))),intersect:(("if (enable_camera_object_u == 0) { return scene_intersection_none; }\r\n\r\nSceneIntersection result = scene_intersection_none;\r\nSceneIntersection ihit = scene_intersection_none;\r\nRay transformed_ray;\r\nfloat len = 0.;\r\nRay r3;\r\nvec4 pos;\r\n\r\nmat4 mat_transform = mat4(1.);\r\nmat4 mat_transform_inv = mat4(1.);\r\n\r\nfor (int i = 0; i < 1000; i++) { if (i >= subspace_degree_u) break; // !FOR_NUMBER!\r\nfor (int i = 0; i < subspace_degree_u; i++) { // !FOR_VARIABLE!\r\n    transformed_ray = transform(cam_mat_inv, transform(mat_transform_inv, r));\r\n    len = length(transformed_ray.d);\r\n    transformed_ray = normalize_ray(transformed_ray);\r\n    ihit = intersect_eye_sphere(transformed_ray);\r\n    ihit.hit.t /= len;\r\n    { // filtering by portal plane\r\n        r3 = transform(mat_transform_inv, r);\r\n        pos = r3.o + r3.d * ihit.hit.t;\r\n        if ((a_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n    }\n    if (nearer(result.hit, ihit.hit)) {\r\n        result = ihit;\r\n        result.hit.n = normalize((mat_transform * (cam_mat * vec4(ihit.hit.n, 0.))).xyz);\r\n    }\r\n\r\n    transformed_ray = transform(cam_mat_inv, transform(mat_transform, r));\r\n    len = length(transformed_ray.d);\r\n    transformed_ray = normalize_ray(transformed_ray);\r\n    ihit = intersect_eye_sphere(transformed_ray);\r\n    ihit.hit.t /= len;\r\n    { // filtering by portal plane\r\n        r3 = transform(mat_transform, r);\r\n        pos = r3.o + r3.d * ihit.hit.t;\r\n        if ((a_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n    }\n    if (nearer(result.hit, ihit.hit)) {\r\n        result = ihit;\r\n        result.hit.n = normalize((mat_transform_inv * (cam_mat * vec4(ihit.hit.n, 0.))).xyz);\r\n    }\r\n\r\n    mat_transform_inv = a_mat * (b0_mat_inv * mat_transform_inv);\r\n    mat_transform = b0_mat * (a_mat_inv * mat_transform);\r\n}\r\n\r\nreturn result;\r\n")),in_subspace:Subspace),"cam_subspace"),(13):Named(Complex(kind:Simple(Some(((38)))),intersect:(("if (enable_camera_object_u == 0) return scene_intersection_none;\r\n\r\nSceneIntersection ihit = intersect_eye_sphere(r);\r\n\r\nvec4 pos = cam1_mat * (r.o + r.d * ihit.hit.t);\r\nif ((a_mat_inv * pos).z < 0.) ihit.hit.hit = false;\r\nif ((b0_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n\r\nreturn ihit;")),in_subspace:Normal),"cam1"),(14):Named(Complex(kind:Simple(Some(((39)))),intersect:(("if (enable_camera_object_u == 0) return scene_intersection_none;\r\n\r\nSceneIntersection ihit = intersect_eye_sphere(r);\r\n\r\nvec4 pos = cam2_mat * (r.o + r.d * ihit.hit.t);\r\nif ((a_mat_inv * pos).z < 0.) ihit.hit.hit = false;\r\nif ((b0_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\nif ((b1_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n\nreturn ihit;\r")),in_subspace:Normal),"cam2"),(15):Named(Complex(kind:Simple(Some(((40)))),intersect:(("if (enable_camera_object_u == 0) return scene_intersection_none;\r\n\r\nSceneIntersection ihit = intersect_eye_sphere(r);\r\n\r\nvec4 pos = cam3_mat * (r.o + r.d * ihit.hit.t);\r\nif ((a_mat_inv * pos).z < 0.) ihit.hit.hit = false;\r\nif ((b0_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\nif ((b1_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\nif ((b2_mat_inv * pos).z > 0.) ihit.hit.hit = false;\r\n\nreturn ihit;\r")),in_subspace:Normal),"cam3")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15)]),cameras:(ids:(available:[],max:9),storage:{(0):Inline((look_at:Coordinate((0,0,0)),alpha:1.2868357506363692,beta:1.3323950195312466,r:2.4304420967397986,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(1):Inline((look_at:Coordinate((0,0,0)),alpha:0,beta:0.01,r:3.5,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(2):Inline((look_at:Coordinate((0,0,0)),alpha:-12.165700075225216,beta:0.8745012875795398,r:1.9756587551882376,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(3):Inline((look_at:Coordinate((0.14,0.14,0.135)),alpha:-13.361797514201355,beta:0.845608892008663,r:0.048017242074020104,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(4):Inline((look_at:Coordinate((0,0,0.135)),alpha:-12.511239557476001,beta:0.01,r:0.07733224853263031,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(5):Inline((look_at:Coordinate((0,0,0)),alpha:-12.355556990907772,beta:1.2000013870894954,r:1.9756587551882376,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(6):Inline((look_at:Coordinate((0,0,0)),alpha:-18.37206727166386,beta:0.8583911349773405,r:2.395800000000002,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(7):Inline((look_at:Coordinate((0.1,0.1,0.1)),alpha:-12.00232910790965,beta:0.7903495330214368,r:1.4876033057851326,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(8):Inline((look_at:Coordinate((0,0,0)),alpha:1.0243341484635222,beta:1.0050687026977527,r:2.2094928152179985,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)))},storage_order:[]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/360_big.png"),"skybox")},storage_order:[(0)]),materials:(ids:(available:[(17),(18),(19)],max:22),storage:{(0):Named(Simple(color:(0.8980392156862745,0.8313725490196079,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_yellow"),(1):Named(Simple(color:(0.050980392156862744,0.050980392156862744,0.050980392156862744),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_black"),(2):Named(Simple(color:(0.9058823529411765,0.29411764705882354,0.29411764705882354),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_red"),(3):Named(Simple(color:(0.2235294117647059,0.2235294117647059,0.2235294117647059),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_gray"),(4):Named(Simple(color:(0.3137254901960784,0.38823529411764707,0.9254901960784314),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_blue"),(5):Named(Simple(color:(0.2627450980392157,0.8470588235294118,0.30196078431372547),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:2,grid_coef:0.3,grid2:false,grid3:false),"grid_gray"),(9):Named(Complex(code:(("return material_simple2(hit, r, vec3(1e0, 2.4376154e-1, 2.4376154e-1), 5e-1, true, 4e0, 3e-1, true, false);"))),"solid_0"),(10):Named(Complex(code:(("return material_simple2(hit, r, vec3(2.4376106e-1, 1e0, 2.5302637e-1), 5e-1, true, 4e0, 3e-1, true, false);"))),"solid_1"),(11):Named(Complex(code:(("return material_simple2(hit, r, vec3(1.8710661e-1, 1.9761491e-1, 1e0), 5e-1, true, 4e0, 3e-1, true, false);"))),"solid_2"),(12):Named(Complex(code:(("return material_simple2(hit, r, vec3(1e0, 9.7995126e-1, 1.5473223e-1), 5e-1, true, 4e0, 3e-1, true, false);"))),"solid_3"),(13):Named(Complex(code:(("return material_simple2(hit, r, vec3(7.078609e-1, 2.0059586e-1, 1e0), 5e-1, true, 4e0, 3e-1, true, false);"))),"solid_4"),(14):Named(Complex(code:(("return material_simple2(hit, r, vec3(1e0, 1.8440866e-1, 6.6435695e-1), 5e-1, true, 4e0, 3e-1, true, false);"))),"solid_5"),(15):Named(Complex(code:(("vec3 color = vec3(1.);\r\nbool not_inside_eye = hit.v > PI/2.;\r\nif (hit.v < 0.6) {\r\nif (abs(hit.u - PI/2.) < 0.1)\r\ncolor = vec3(104./255., 40./255., 4./255.);\r\nelse\r\ncolor = vec3(77./255., 155./255., 0./255.);\r\n}\r\nif (hit.v < 0.2) color = vec3(sqr(0. + hit.v / 0.2 * 0.12));\r\nif (not_inside_eye && abs(hit.u - PI/2.) < 0.1) color = vec3(0.);\r\nhit.u /= PI;\r\nhit.v /= PI;\r\n\r\nreturn material_simple(hit, r, color, 5e-1, not_inside_eye, 16e0, 3e-1);"))),"camera_eye"),(16):Named(Complex(code:(("return material_simple2(hit, r, vec3(2.823529411764706e-1, 9.84313725490196e-1, 7.333333333333333e-1), 5e-1, true, 4e0, 3e-1, true, false);"))),"solid_7"),(20):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"solid_black"),(21):Named(Complex(code:(("return material_simple(hit, r, vec3(9.176470588235294e-1, 9.176470588235294e-1, 9.176470588235294e-1) * (PI + atan(hit.u, hit.v))/(2.0*PI), 5e-1, false, 4e0, 3e-1);"))),"solid_white")},storage_order:[(0),(2),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(16),(20),(21),(15)]),intersection_materials:(ids:(available:[],max:3),storage:{(0):Named(((("if (r.in_subspace) { \r\nreturn SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n}\r\n\r\nvec3 normal = -get_normal(a_mat);\r\nSurfaceIntersection hit = plane_intersect(r, a_mat_inv, normal);\r\nvec4 pos_local = a_mat_inv * (r.o + r.d * hit.t);\r\nbool is_back = is_collinear(hit.n, normal);\r\nint is_inside = NOT_INSIDE;\r\nif (!definitely_not_in_portal(hit.u, hit.v)) {\r\n    vec4 pos1 = b2_mat * pos_local;\r\n    if (is_inside_subspace(pos_local)) {\r\n        int teleport_material = solid_7_M;\r\n        if (teleport_light_subspace_u == 1) {\r\n            teleport_material = TELEPORT;\r\n        }\r\n        is_inside = ellipse_portal(hit.u, hit.v, is_back, true, teleport_material);\r\n    }    \r\n}\r\n\r\nif (is_inside == NOT_INSIDE) {\r\n    return SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n} else if (is_inside == TELEPORT) {\r\n    r.o = r.o + r.d * (_offset_after_material + hit.t);\r\n    return SceneIntersectionWithMaterial(\r\n        SceneIntersection(CUSTOM_MATERIAL, hit, false),\r\n        material_change_subspace(r)\r\n    );\r\n} else {\r\n    return SceneIntersectionWithMaterial(\r\n        SceneIntersection(is_inside, hit, false),\r\n        material_empty()\r\n    );\r\n}"))),"subspace"),(1):Named(((("if (r.in_subspace) {\r\nreturn SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n}\r\n\r\nRay r_b = r;\r\nvec4 normal_b = b0_mat * vec4(0., 0., 1., 0.);\r\n\r\nvec3 normal_a = -get_normal(a_mat);\r\nSurfaceIntersection hit_a = plane_intersect(r, a_mat_inv, normal_a);\r\nvec4 pos_a = r.o + r.d * hit_a.t;\r\n\r\nRay r_teleport_a = r;\r\nRay r_teleport_b = r;\r\n\r\nSceneIntersectionWithMaterial result = SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n\r\nfor (int size = 0; size < 50; size++) { if (size >= show_teleported_u) break; // !FOR_NUMBER!\r\nfor (int size = 0; size < show_teleported_u; size++) { // !FOR_VARIABLE!\r\n\tr_teleport_a = transform(b0_mat, transform(a_mat_inv, r_teleport_a));\r\n\tr_teleport_b = transform(a_mat, transform(b0_mat_inv, r_teleport_b));\r\n\r\n\tint material = size;\r\n\tif (material > 10) { material = 10; }\r\n\r\n\tif (nearer(result.scene.hit, hit_a)) {\r\n\t\tint is_inside = is_inside_portal_advanced(pos_a, hit_a.u, hit_a.v, is_collinear(hit_a.n, normal_a), true, size, solid_0_M + material);\r\n\t\tif (is_inside != NOT_INSIDE) {\r\n\t\t\tresult.scene = process_portal_intersection(result.scene, hit_a, is_inside, CUSTOM_MATERIAL);\r\n\t\t\tif (result.scene.material == CUSTOM_MATERIAL) {\r\n\t\t\t\tresult.material = material_teleport_transformed(offset_ray(r_teleport_a, hit_a.t));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// -----------------------------------------------------------------------\r\n\r\n\tvec3 normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n\tRay r3 = transform(b0_mat_inv, r_b);\r\n\tfloat len = length(r3.d);\r\n\tr3 = normalize_ray(r3);\r\n\r\n\tSurfaceIntersection hit_b = plane_intersect_normalized(r3);\r\n\tif (hit_b.hit) {\r\n\t    hit_b.t /= len;\r\n\t    hit_b.n = normal3;\r\n\t}\r\n\r\n\tif (nearer(result.scene.hit, hit_b)) {\r\n\t\tint is_inside = is_inside_portal_advanced(r.o + r.d * hit_b.t, hit_b.u, hit_b.v, is_collinear(hit_b.n, normal_b.xyz), false, size, solid_0_M + material);\r\n\t\tif (is_inside != NOT_INSIDE) {\r\n\t\t\tresult.scene = process_portal_intersection(result.scene, hit_b, is_inside, CUSTOM_MATERIAL);\r\n\t\t\tif (result.scene.material == CUSTOM_MATERIAL) {\r\n\t\t\t\tresult.material = material_teleport_transformed(offset_ray(r_teleport_b, hit_b.t));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tr_b = transform(a_mat, transform(b0_mat_inv, r_b));\r\n\tnormal_b = b0_mat * (a_mat_inv * normal_b);\r\n}\r\n\r\nreturn result;\r\n"))),"portal in portal"),(2):Named(((("if (!r.in_subspace) { return SceneIntersectionWithMaterial(scene_intersection_none, material_empty()); }\r\n\r\nvec4 pos_local;\r\nbool is_back;\r\nint is_inside;\r\n\r\nSurfaceIntersection hit = intersection_none;\r\nSceneIntersectionWithMaterial result = SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n\r\n{\r\n    vec4 normal_b = b0_mat * vec4(0., 0., 1., 0.);\r\n    vec3 normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n    Ray r_b = r;\r\n    SurfaceIntersection hit_b;\r\n    Ray r3;\r\n    float len = 0.;\r\n    Ray r_teleport_b = r;\r\n\r\n    // kostyl only for positive B-related teleportation degrees\r\n    r_teleport_b = transform(a_mat, transform(b0_mat_inv, r_teleport_b));\r\n    normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n\r\n    for (int i = 0; i < 1000; i++) { if (i >= subspace_degree_u) break; // !FOR_NUMBER!\r\n    for (int i = 0; i < subspace_degree_u; i++) { // !FOR_VARIABLE!\r\n        r3 = transform(b0_mat_inv, r_b);\r\n        len = length(r3.d);\r\n        r3 = normalize_ray(r3);\r\n        hit = plane_intersect_normalized(r3);\r\n        pos_local = r3.o + r3.d * hit.t;\r\n        if (hit.hit) {\r\n            hit.t /= len;\r\n            hit.n = normal3;\r\n        }\r\n        is_back = is_collinear(hit.n, normal_b.xyz);\r\n        is_inside = NOT_INSIDE;\r\n        if (nearer(result.scene.hit, hit)) {\r\n            if (!definitely_not_in_portal(hit.u, hit.v)) {\r\n                if (is_inside_subspace(pos_local)) {\r\n                    is_inside = ellipse_portal(hit.u, hit.v, is_back, false, solid_7_M);\r\n                }    \r\n            }\r\n            if (is_inside != NOT_INSIDE) {\r\n                result.scene = process_portal_intersection(result.scene, hit, is_inside, CUSTOM_MATERIAL);\r\n                if (result.scene.material == CUSTOM_MATERIAL) {\r\n                    result.material = material_teleport_transformed(offset_ray(r_teleport_b, hit.t * (1. + _offset_after_material)));\r\n                    result.material.new_ray.in_subspace = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // todo: multiply it into one matrix externally\r\n        r_b = transform(a_mat, transform(b0_mat_inv, r_b));\r\n        normal_b = b0_mat * (a_mat_inv * normal_b);\r\n\r\n        r_teleport_b = transform(a_mat, transform(b0_mat_inv, r_teleport_b));\r\n        normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n    }\r\n}\r\n\r\n// todo: combine this with previous for loop\r\n{\r\n    vec4 normal_b = a_mat * vec4(0., 0., 1., 0.);\r\n    vec3 normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n    Ray r_b = r;\r\n    SurfaceIntersection hit_b;\r\n    Ray r3;\r\n    float len = 0.;\r\n    Ray r_teleport_b = r;\r\n\r\n    for (int i = 0; i < 1000; i++) { if (i >= subspace_degree_u) break; // !FOR_NUMBER!\r\n    for (int i = 0; i < subspace_degree_u; i++) { // !FOR_VARIABLE!\r\n        r3 = transform(a_mat_inv, r_b);\r\n        len = length(r3.d);\r\n        r3 = normalize_ray(r3);\r\n        hit = plane_intersect_normalized(r3);\r\n        pos_local = r3.o + r3.d * hit.t;\r\n        if (hit.hit) {\r\n            hit.t /= len;\r\n            hit.n = normal3;\r\n        }\r\n        is_back = is_collinear(hit.n, normal_b.xyz);\r\n        is_inside = NOT_INSIDE;\r\n        if (nearer(result.scene.hit, hit)) {\r\n            if (!definitely_not_in_portal(hit.u, hit.v)) {\r\n                if (is_inside_subspace(pos_local)) {\r\n                    is_inside = ellipse_portal(hit.u, hit.v, is_back, false, solid_7_M);\r\n                }    \r\n            }\r\n            if (is_inside != NOT_INSIDE) {\r\n                result.scene = process_portal_intersection(result.scene, hit, is_inside, CUSTOM_MATERIAL);\r\n                if (result.scene.material == CUSTOM_MATERIAL) {\r\n                    result.material = material_teleport_transformed(offset_ray(r_teleport_b, hit.t * (1. + _offset_after_material)));\r\n                    result.material.new_ray.in_subspace = false;\r\n                }\r\n            }\r\n        }\r\n        r_b = transform(b0_mat, transform(a_mat_inv, r_b));\r\n        normal_b = a_mat * (b0_mat_inv * normal_b);\r\n\r\n        r_teleport_b = transform(b0_mat, transform(a_mat_inv, r_teleport_b));\r\n        normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n    }\r\n}\r\n\r\nreturn result;\r\n"))),"subspace2")},storage_order:[(0),(2),(1)]),library:(ids:(available:[(5)],max:7),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("float circle_distance(float x, float y) {\r\n  return sqrt(sqr(x) + sqr(y));\r\n}\r\n\r\nfloat ellipse_distance(float x, float y) {\r\n  return sqrt(2.*sqr(x) + sqr(y));\r\n}\r\n\r\nfloat square_distance(float x, float y) {\r\n  return max(abs(x), abs(y));\r\n}\r\n\nfloat corner_distance(float x, float y) {\r\n  return max(x, y);\r\n}\r\n\r\nfloat general_distance(float x, float y) {\r\n  if (shape_u == 0) {\r\n    return ellipse_distance(x, y);\r\n  } else if (shape_u == 1) {\r\n    return circle_distance(x, y);\r\n  } else if (shape_u == 2) {\r\n    return square_distance(x, y);\r\n  }\r else if (shape_u == 3) {\r\n    return corner_distance(x, y);\r\n  }\r\n  return 0.;\r\n}\r\n\r\nfloat patch_distance(float x, float y, mat4 mat) {\r\n  vec4 pos = mat * vec4(x, y, 0., 1.);\r\n  return general_distance(pos.x, pos.y);\r\n}\r\n\r\nfloat total_distance(float x, float y) {\r\n  if (use_patch_shape_u == 1) {\r\n    return min(\r\n      patch_distance(x, y, patch1_mat_inv),\r\n      min(\r\n        patch_distance(x, y, patch2_mat_inv),\r\n        min(\r\n          patch_distance(x, y, patch3_mat_inv),\r\n          min(\r\n            patch_distance(x, y, patch4_mat_inv),\r\n            patch_distance(x, y, patch5_mat_inv)\r\n          )\r\n        )\r\n      )\r\n    );\r\n  } else {\r\n    return general_distance(x, y);\r\n  }\r\n}\r\n\r\nint is_inside_portal(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  float black_border,\r\n  int material_first, \r\n  int material_second, \r\n  int grid_material_first, \r\n  int grid_material_second, \r\n  bool back,\r\n  bool first\r\n) {\r\n  int material = material_second;\r\n  if (first) { material = material_first; }\r\n\r\n  if (distance < size) {\r\n    if (back) {\r\n      return material;      \r\n    } else {\r\n      if (teleport_light_u == 1) {\r\n        return TELEPORT;\r\n      } else {\r\n        if (first) {\r\n          return grid_material_first;\r\n        } else {\r\n          return grid_material_second;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  int black_material = solid_black_M;\r\n  if (_black_border_disable == 1) black_material = material;\r\n  if (distance < size + black_border && !back) return black_material;\r\n  if (distance < size + black_border + border) return material;\r\n  if (distance < size + black_border + border + black_border) return black_material;\r\n\r\n  return NOT_INSIDE;\r\n}\r\n\r\nint ellipse_portal(float x, float y, bool back, bool first, int not_teleport_material) {\r\n  return is_inside_portal(\r\n    total_distance(x, y), \r\n    1., \r\n    border_size_u,\r\n    black_border_size_u,\r\n    portal_orange_M, \r\n    portal_blue_M, \r\n    not_teleport_material, \r\n    not_teleport_material, \r\n    back,\r\n    first\r\n  );\r\n}\r\n\r\nbool definitely_not_in_portal(float x, float y) {\r\n  if (use_patch_shape_u == 1 || shape_u == 3) return false;\r\n  return !(abs(x) < 2.2 && abs(y) < 2.2);\r\n}")),"portal"),(2):Named((("int is_inside_portal_advanced(vec4 pos, float x, float y, bool back, bool first, int size, int material) {\r\nif (show_teleported_u < size && !first) return NOT_INSIDE;\r\n\r\nif (definitely_not_in_portal(x, y)) return NOT_INSIDE;\r\n\r\nvec4 pos1 = pos;\r\nif (filter_teleported_u == 1 || first) {\r\n\tif (!first && (a_mat_inv * pos1).z < 0.) return NOT_INSIDE;\r\n\r\n\tvec4 pos2 = pos1;\r\n\tif (first) {\r\n\t\tpos2 = a_mat_inv * (b0_mat * (a_mat_inv * pos2));\r\n\t} else {\r\n\t\tpos2 = b0_mat_inv * pos2;\r\n\t}\r\n\tfor (int i = 0; i < 50; ++i) {\n\t\tif (i >= size) break;\r\n\t\tif (pos2.z > 0.) return NOT_INSIDE;\r\n\t\tif (first) {\r\n\t\t\tpos2 = a_mat_inv * (b0_mat * pos2);\r\n\t\t} else {\r\n\t\t\tpos2 = b0_mat_inv * (a_mat * pos2);\r\n\t\t}\r\n\t}\r\n\tif (first && pos2.z < 0.) return NOT_INSIDE;\n}\r\n\r\nreturn ellipse_portal(x, y, back, first, material);\r\n}")),"portal_advanced"),(3):Named((("bool is_inside_subspace(vec4 pos) {\r\n    for (int i = 0; i < 1000; i++) { if (i >= subspace_detect_degree_u) break; // !FOR_NUMBER!\r\n    for (int i = 0; i < subspace_detect_degree_u; i++) { // !FOR_VARIABLE!\r\n        pos = teleport_mat * pos;\r\n        if (pos.z > 0.) return false;\r\n    }\r\n    return true;\r\n}")),"subspace"),(4):Named((("SceneIntersection intersect_eye_sphere(Ray r) {\nvec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\n// if (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(camera_eye_M, SurfaceIntersection(true, t, u, v, n), false);\n}")),"eye_sphere"),(6):Named((("SceneIntersection intersect_box(Ray r, int material, vec3 size) {\nvec3 rad = size;\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y+rod_size_u);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y+rod_size_u, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box")},storage_order:[(0),(1),(2),(6),(3),(4)]),animations_filters:(uniforms:({((6)):true,((21)):true,((22)):true,((8)):true,((29)):true,((30)):false,((24)):true,((45)):true,((0)):false,((7)):false,((18)):true,((9)):true,((17)):true,((12)):true,((10)):true,((14)):true,((2)):false,((34)):true,((35)):true,((1)):false,((38)):true,((33)):true,((23)):true,((15)):true,((31)):false,((32)):true}),matrices:({((23)):false,((20)):false,((40)):false,((27)):false,((51)):false,((39)):false,((13)):false,((14)):true,((0)):false,((44)):true,((30)):true,((19)):false,((34)):true,((47)):false,((54)):false,((24)):false,((33)):true,((29)):true,((32)):true,((35)):false,((16)):false,((46)):false,((15)):false,((38)):false,((18)):true,((17)):false,((22)):false,((21)):false,((45)):false}),cameras:({((1)):false,((2)):true,((0)):false})),elements_descriptions:(uniforms:({((32)):(help_description:None,overrided_name:"Angle"),((9)):(help_description:None,overrided_name:"Regular teleportation degree"),((21)):(help_description:None,overrided_name:"Subspace detect degree"),((24)):(help_description:None,overrided_name:"Z"),((31)):(help_description:None,overrided_name:"Black border size"),((33)):(help_description:None,overrided_name:"Scale"),((6)):(help_description:None,overrided_name:"Teleport light"),((38)):(help_description:None,overrided_name:"Progress"),((22)):(help_description:None,overrided_name:"Use patch shape"),((14)):(help_description:None,overrided_name:"Rod size"),((45)):(help_description:None,overrided_name:"Not disable orange portal"),((18)):(help_description:None,overrided_name:"Teleported parts count"),((34)):(help_description:None,overrided_name:"Offset"),((35)):(help_description:None,overrided_name:"Use teleported matrix"),((17)):(help_description:None,overrided_name:"Filter not teleported parts"),((8)):(help_description:None,overrided_name:"Subspace teleportation degree"),((29)):(help_description:None,overrided_name:"Portal shape"),((12)):(help_description:None,overrided_name:"Teleport light for subspace"),((23)):(help_description:Some((eng:"This is buggy, sometimes you may see disappearance of the sphere.",rus:"This is buggy, sometimes you may see disappearance of the sphere.")),overrided_name:"Enable camera object"),((15)):(help_description:None,overrided_name:"Enable rod"),((7)):(help_description:None,overrided_name:""),((10)):(help_description:None,overrided_name:"Filter teleported"),((30)):(help_description:None,overrided_name:"Border size")}),matrices:({((18)):(help_description:None,overrided_name:"Rod"),((34)):(help_description:None,overrided_name:"Patch 5"),((33)):(help_description:None,overrided_name:"Patch 4"),((44)):(help_description:None,overrided_name:""),((14)):(help_description:None,overrided_name:"Blue portal"),((30)):(help_description:None,overrided_name:"Patch 2"),((29)):(help_description:None,overrided_name:"Patch 1"),((32)):(help_description:None,overrided_name:"Patch 3"),((13)):(help_description:None,overrided_name:"")}),cameras:({((1)):(help_description:None,overrided_name:"Blue portal"),((2)):(help_description:None,overrided_name:""),((0)):(help_description:None,overrided_name:"Orange portal")})),user_uniforms:(uniforms:({((29)):true,((24)):false,((18)):true,((33)):false,((2)):false,((21)):true,((17)):true,((12)):true,((45)):false,((30)):false,((7)):true,((34)):false,((15)):false,((35)):false,((6)):true,((8)):true,((14)):false,((32)):false,((10)):true,((31)):false,((1)):false,((23)):true,((0)):false,((22)):false,((9)):true,((38)):false}),matrices:({((24)):false,((47)):false,((18)):false,((44)):false,((54)):false,((23)):false,((19)):false,((46)):false,((13)):false,((27)):false,((20)):false,((22)):false,((51)):false,((34)):false,((21)):false,((14)):false,((45)):false,((33)):false,((30)):false,((16)):false,((0)):false,((29)):false,((17)):false,((15)):false,((32)):false})),animation_stages:(ids:(available:[],max:1),storage:{(0):Named((name:(eng:"Explore",rus:"Исследование"),description:None,uniforms:({((0)):FromDev,((15)):ProvidedToUser,((31)):FromDev,((21)):FromDev,((9)):FromDev,((30)):FromDev,((2)):FromDev,((12)):FromDev,((8)):FromDev,((29)):FromDev,((10)):FromDev,((22)):ProvidedToUser,((1)):FromDev,((7)):FromDev,((6)):FromDev,((14)):ProvidedToUser}),matrices:({((21)):FromDev,((33)):ProvidedToUser,((18)):ProvidedToUser,((0)):FromDev,((17)):FromDev,((34)):ProvidedToUser,((30)):ProvidedToUser,((16)):FromDev,((13)):FromDev,((23)):FromDev,((27)):FromDev,((15)):FromDev,((29)):ProvidedToUser,((22)):FromDev,((14)):ProvidedToUser,((32)):ProvidedToUser}),original_cam_button:false,set_cam:None,cams:{},hidden:false),"Explore")},storage_order:[(0)]),current_stage:Animation(((0))),dev_stage:(uniforms:({((6)):Bool(true),((31)):Formula(("0.01")),((1)):Float((min:Some(0),max:None,value:4)),((30)):Formula(("0.035")),((21)):Int((min:Some(0),max:None,value:4)),((10)):Bool(true),((23)):Bool(true),((22)):Bool(false),((9)):Int((min:Some(0),max:None,value:14)),((12)):Bool(true),((0)):Float((min:Some(0),max:None,value:4)),((29)):Int((min:Some(0),max:Some(3),value:1)),((24)):Bool(true),((8)):Int((min:Some(0),max:None,value:20)),((15)):Bool(false),((2)):Float((min:Some(0),max:None,value:4)),((14)):Float((min:Some(1),max:Some(1000),value:50))}),matrices:({((23)):Teleport(first_portal:Some(((13))),second_portal:Some(((16))),what:Some(((17)))),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((32)):Simple(offset:(0,1,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((39)):Teleport(first_portal:Some(((13))),second_portal:Some(((15))),what:Some(((35)))),((40)):Teleport(first_portal:Some(((13))),second_portal:Some(((16))),what:Some(((35)))),((16)):Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((15)))),((34)):Simple(offset:(0,0,0),scale:0.91,rotate:(1.2217304763960306,3.6651914291880923,0),mirror:(false,false,false)),((21)):Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((17)))),((27)):Teleport(first_portal:Some(((13))),second_portal:Some(((28))),what:Some(((14)))),((35)):Mul(to:Some(((37))),what:Some(((36)))),((13)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((33)):Simple(offset:(0,-1,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((15)):Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((14)))),((30)):Simple(offset:(1,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((38)):Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((35)))),((22)):Teleport(first_portal:Some(((13))),second_portal:Some(((15))),what:Some(((17)))),((18)):Simple(offset:(-0.44,0.45,1.05),scale:0.13,rotate:(0,1.5707963267948966,4.71238898038469),mirror:(false,false,false)),((17)):Mul(to:Some(((19))),what:Some(((18)))),((29)):Simple(offset:(-1,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((14)):Simple(offset:(0,0,-0.95),scale:0.81,rotate:(0,0,0),mirror:(false,false,false))})),animations:(ids:(available:[],max:2),storage:{(0):Named((duration:5,animation_stage:Animation(((0))),uniforms:({((14)):CopyPrev,((9)):CopyPrev,((8)):CopyPrev,((31)):CopyPrev,((10)):CopyPrev,((0)):CopyPrev,((29)):CopyPrev,((2)):CopyPrev,((15)):Changed(Some(((7)))),((6)):CopyPrev,((1)):CopyPrev,((12)):CopyPrev,((30)):CopyPrev}),matrices:({((17)):CopyPrev,((21)):CopyPrev,((16)):CopyPrev,((0)):CopyPrev,((15)):CopyPrev,((13)):CopyPrev,((14)):Changed(Some(((25)))),((22)):CopyPrev,((23)):CopyPrev,((18)):CopyPrev}),use_prev_cam:false,use_start_cam_as_end:true,cam_start:Some(((0))),cam_end:None,cam_easing:Linear),"impossible.0"),(1):Named((duration:3,animation_stage:Animation(((0))),uniforms:({((1)):CopyPrev,((29)):CopyPrev,((12)):CopyPrev,((6)):Changed(Some(((19)))),((8)):CopyPrev,((30)):CopyPrev,((31)):CopyPrev,((10)):CopyPrev,((14)):CopyPrev,((9)):CopyPrev,((15)):Changed(Some(((20)))),((2)):CopyPrev,((0)):CopyPrev}),matrices:({((18)):CopyPrev,((14)):Changed(Some(((26)))),((0)):CopyPrev,((15)):CopyPrev,((17)):CopyPrev,((13)):CopyPrev,((23)):CopyPrev,((16)):CopyPrev,((21)):CopyPrev,((22)):CopyPrev}),use_prev_cam:false,use_start_cam_as_end:true,cam_start:Some(((8))),cam_end:None,cam_easing:Linear),"solution.0")},storage_order:[(0),(1)]),use_time:false,skybox:Some("skybox"))