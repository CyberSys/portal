(desc:(eng:"",rus:""),cam:(look_at:(0,0,0),alpha:1.207173185282908,beta:0.9317288192086862,r:1.6528925619835282,offset_after_material:0.000004),uniforms:(ids:(available:[(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(32),(33),(34),(35),(36),(37),(38)],max:40),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Bool(true),"teleport_light"),(7):Named(Bool(false),"only_in_subspace"),(8):Named(Int((min:Some(0),max:None,value:21)),"subspace_degree"),(9):Named(Int((min:Some(0),max:None,value:5)),"show_teleported"),(10):Named(Bool(true),"filter_teleported"),(11):Inline(Angle(0)),(12):Named(Bool(true),"teleport_light_subspace"),(13):Inline(Formula(("((time * speed) % 1) * 2 * pi()"))),(29):Named(Int((min:Some(0),max:Some(2),value:1)),"shape"),(30):Named(Formula(("0.035")),"border_size"),(31):Named(Formula(("0.01")),"black_border_size"),(39):Inline(Formula(("sin(pi())")))},storage_order:[(0),(1),(2),(6),(29),(30),(31),(7),(8),(9),(10),(12)]),matrices:(ids:(available:[(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41)],max:43),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"a"),(14):Named(Simple(offset:(0,0,-0.36),scale:0.6,rotate:(4.71238898038469,4.066617157146788,3.8746309394274117),mirror:(true,false,false)),"b0"),(15):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((14)))),"b1"),(16):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((15)))),"b2"),(31):Inline(Simple(offset:(0,0,0.24),scale:1,rotate:(0.2792526803190927,0,0),mirror:(false,false,false))),(42):Inline(Simple(offset:(0,0.16,0.31),scale:1,rotate:(4.71238898038469,5.427973973702365,0),mirror:(false,false,false)))},storage_order:[(0),(13),(14),(15),(16)]),objects:(ids:(available:[],max:6),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);"))),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);"))),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);"))),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);"))),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);"))),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);"))),"room_z-")},storage_order:[(0),(1),(2),(3),(4),(5)]),cameras:(ids:(available:[(0),(1)],max:8),storage:{(2):Inline((look_at:Coordinate((0,0,0)),alpha:-12.165700075225216,beta:0.8745012875795398,r:1.9756587551882376)),(3):Inline((look_at:Coordinate((0.14,0.14,0.135)),alpha:-13.361797514201355,beta:0.845608892008663,r:0.048017242074020104)),(4):Inline((look_at:Coordinate((0,0,0.135)),alpha:-12.511239557476001,beta:0.01,r:0.07733224853263031)),(5):Inline((look_at:Coordinate((0,0,0)),alpha:-12.355556990907772,beta:1.2000013870894954,r:1.9756587551882376)),(6):Inline((look_at:Coordinate((0,0,0)),alpha:-18.37206727166386,beta:0.8583911349773405,r:2.395800000000002)),(7):Inline((look_at:Coordinate((0.1,0.1,0.1)),alpha:-12.00232910790965,beta:0.7903495330214368,r:1.4876033057851326))},storage_order:[]),textures:(ids:(available:[],max:0),storage:{},storage_order:[]),materials:(ids:(available:[(15),(17),(18),(19)],max:22),storage:{(0):Named(Simple(color:(0.7647058823529411,0.7019607843137254,0.058823529411764705),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_yellow"),(1):Named(Simple(color:(0.029196177,0.029196177,0.029196177),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_black"),(2):Named(Simple(color:(0.8458183,0.07454156,0.07454156),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_red"),(3):Named(Simple(color:(0.18068509,0.18068509,0.18068509),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_gray"),(4):Named(Simple(color:(0.116810285,0.26798066,0.9083436),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_blue"),(5):Named(Simple(color:(0.15294117647058825,0.7372549019607844,0.21568627450980393),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"grid_gray"),(9):Named(Complex(code:(("return material_simple(hit, r, vec3(1e0, 2.4376154e-1, 2.4376154e-1)*digits1(hit), 5e-1, true, 4e0, 3e-1);"))),"solid_0"),(10):Named(Complex(code:(("return material_simple(hit, r, vec3(2.4376106e-1, 1e0, 2.5302637e-1)*digits1(hit), 5e-1, true, 4e0, 3e-1);"))),"solid_1"),(11):Named(Complex(code:(("return material_simple(hit, r, vec3(1.8710661e-1, 1.9761491e-1, 1e0)*digits1(hit), 5e-1, true, 4e0, 3e-1);"))),"solid_2"),(12):Named(Complex(code:(("return material_simple(hit, r, vec3(1e0, 9.7995126e-1, 1.5473223e-1)*digits1(hit), 5e-1, true, 4e0, 3e-1);"))),"solid_3"),(13):Named(Complex(code:(("return material_simple(hit, r, vec3(7.078609e-1, 2.0059586e-1, 1e0)*digits1(hit), 5e-1, true, 4e0, 3e-1);"))),"solid_4"),(14):Named(Complex(code:(("return material_simple(hit, r, vec3(1e0, 1.8440866e-1, 6.6435695e-1)*digits1(hit), 5e-1, true, 4e0, 3e-1);"))),"solid_5"),(16):Named(Complex(code:(("return material_simple(hit, r, vec3(2.823529411764706e-1, 9.84313725490196e-1, 7.333333333333333e-1)*digits1(hit), 5e-1, true, 4e0, 3e-1);"))),"solid_7"),(20):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black"),(21):Named(Complex(code:(("return material_simple(hit, r, vec3(9.176470588235294e-1, 9.176470588235294e-1, 9.176470588235294e-1) * (PI + atan(hit.u, hit.v))/(2.0*PI), 5e-1, false, 4e0, 3e-1);"))),"solid_white")},storage_order:[(0),(2),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(16),(20),(21)]),intersection_materials:(ids:(available:[],max:2),storage:{(0):Named(((("vec3 normal = -get_normal(a_mat);\r\nSurfaceIntersection hit = plane_intersect(r, a_mat_inv, normal);\r\nvec4 pos_local = a_mat_inv * (r.o + r.d * hit.t);\r\nbool is_back = is_collinear(hit.n, normal);\r\nint is_inside = NOT_INSIDE;\r\nif (!definitely_not_in_portal(hit.u, hit.v)) {\r\n    vec4 pos1 = b2_mat * pos_local;\r\n    if (!(\r\n        (b0_mat_inv * pos1).z > 0. ||\r\n        (b1_mat_inv * pos1).z > 0. ||\r\n        (a_mat_inv * pos1).z > 0.\r\n    )) {\r\n        int teleport_material = solid_7_M;\r\n        if (teleport_light_subspace_u == 1) {\r\n            teleport_material = TELEPORT;\r\n        }\r\n        is_inside = ellipse_portal(hit.u, hit.v, is_back, true, teleport_material);\r\n    }    \r\n}\r\n\r\nSurfaceIntersection final_hit = hit;\r\n\r\nif (is_inside == NOT_INSIDE) {\r\n    return SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n} else if (is_inside == TELEPORT) {\r\n    // complex subspace logic here\r\n    r.o = r.o + r.d * (_offset_after_material + final_hit.t);\r\n\r\n    SurfaceIntersection hit = intersection_none;\r\n    SceneIntersectionWithMaterial result = SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n\r\n    {\r\n        vec3 normal3;\r\n        vec4 normal_b = b0_mat * vec4(0., 0., 1., 0.);\r\n        Ray r_b = r;\r\n        SurfaceIntersection hit_b;\r\n        Ray r3;\r\n        float len = 0.;\r\n        Ray r_teleport_b = r;\r\n\r\n        // kostyl only for positive B-related teleportation degrees\r\n        r_teleport_b = transform(a_mat, transform(b0_mat_inv, r_teleport_b));\r\n        normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n\r\n        for (int i = 0; i < 1000; ++i) {if (i >= subspace_degree_u) break;\r\n            r3 = transform(b0_mat_inv, r_b);\r\n            len = length(r3.d);\r\n            r3 = normalize_ray(r3);\r\n            hit = plane_intersect_normalized(r3);\r\n            pos_local = r3.o + r3.d * hit.t;\r\n            if (hit.hit) {\r\n                hit.t /= len;\r\n                hit.n = normal3;\r\n            }\r\n            is_back = is_collinear(hit.n, normal_b.xyz);\r\n            is_inside = NOT_INSIDE;\r\n            if (nearer(result.scene.hit, hit)) {\r\n                if (!definitely_not_in_portal(hit.u, hit.v)) {\r\n                    vec4 pos1 = b2_mat * pos_local;\r\n                    // todo: make this a for loop, and move out it into a function\r\n                    if (!(\r\n                        (b0_mat_inv * pos1).z > 0. ||\r\n                        (b1_mat_inv * pos1).z > 0. ||\r\n                        (a_mat_inv * pos1).z > 0.\r\n                    )) {\r\n                        is_inside = ellipse_portal(hit.u, hit.v, is_back, false, solid_7_M);\r\n                    }    \r\n                }\r\n                if (is_inside != NOT_INSIDE) {\r\n                    result.scene = process_portal_intersection(result.scene, hit, is_inside, CUSTOM_MATERIAL);\r\n                    if (result.scene.material == CUSTOM_MATERIAL) {\r\n                        result.material = material_teleport_transformed(offset_ray(r_teleport_b, hit.t * (1. + _offset_after_material)));\r\n                    }\r\n                }\r\n            }\r\n\r\n            // todo: multiply it into one matrix externally\r\n            r_b = transform(a_mat, transform(b0_mat_inv, r_b));\r\n            normal_b = b0_mat * (a_mat_inv * normal_b);\r\n\r\n            r_teleport_b = transform(a_mat, transform(b0_mat_inv, r_teleport_b));\r\n            normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n        }\r\n    }\r\n\r\n    // todo: combine this with previous for loop\r\n    {\r\n        vec3 normal3;\r\n        vec4 normal_b = a_mat * vec4(0., 0., 1., 0.);\r\n        Ray r_b = r;\r\n        SurfaceIntersection hit_b;\r\n        Ray r3;\r\n        float len = 0.;\r\n        Ray r_teleport_b = r;\r\n\r\n        for (int i = 0; i < 1000; ++i) {if (i >= subspace_degree_u) break;\r\n            r3 = transform(a_mat_inv, r_b);\r\n            len = length(r3.d);\r\n            r3 = normalize_ray(r3);\r\n            hit = plane_intersect_normalized(r3);\r\n            pos_local = r3.o + r3.d * hit.t;\r\n            if (hit.hit) {\r\n                hit.t /= len;\r\n                hit.n = normal3;\r\n            }\r\n            is_back = is_collinear(hit.n, normal_b.xyz);\r\n            is_inside = NOT_INSIDE;\r\n            if (nearer(result.scene.hit, hit)) {\r\n                if (!definitely_not_in_portal(hit.u, hit.v)) {\r\n                    vec4 pos1 = b2_mat * pos_local;\r\n                    if (!(\r\n                        (b0_mat_inv * pos1).z > 0. ||\r\n                        (b1_mat_inv * pos1).z > 0. ||\r\n                        (a_mat_inv * pos1).z > 0.\r\n                    )) {\r\n                        is_inside = ellipse_portal(hit.u, hit.v, is_back, false, solid_7_M);\r\n                    }    \r\n                }\r\n                if (is_inside != NOT_INSIDE) {\r\n                    result.scene = process_portal_intersection(result.scene, hit, is_inside, CUSTOM_MATERIAL);\r\n                    if (result.scene.material == CUSTOM_MATERIAL) {\r\n                        result.material = material_teleport_transformed(offset_ray(r_teleport_b, hit.t * (1. + _offset_after_material)));\r\n                    }\r\n                }\r\n            }\r\n            r_b = transform(b0_mat, transform(a_mat_inv, r_b));\r\n            normal_b = a_mat * (b0_mat_inv * normal_b);\r\n\r\n            r_teleport_b = transform(b0_mat, transform(a_mat_inv, r_teleport_b));\r\n            normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n        }\r\n    }\r\n\r\n    if (!result.scene.hit.hit) return SceneIntersectionWithMaterial(\r\n        SceneIntersection(CUSTOM_MATERIAL, final_hit),\r\n        material_final(vec3(0.))\r\n    );\r\n\r\n    result.scene.hit.t = final_hit.t;\r\n    \r\n    return result;\r\n} else {\r\n    return SceneIntersectionWithMaterial(\r\n        SceneIntersection(is_inside, hit),\r\n        material_empty()\r\n    );\r\n}\r\n"))),"subspace"),(1):Named(((("Ray r_b = r;\r\nvec4 normal_b = b0_mat * vec4(0., 0., 1., 0.);\r\n\r\nvec3 normal_a = -get_normal(a_mat);\r\nSurfaceIntersection hit_a = plane_intersect(r, a_mat_inv, normal_a);\r\nvec4 pos_a = r.o + r.d * hit_a.t;\r\n\r\nRay r_teleport_a = r;\r\nRay r_teleport_b = r;\r\n\r\nSceneIntersectionWithMaterial result = SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n\r\nfor (int size = 0; size < 50; ++size) {\r\n\tif (size >= show_teleported_u) break;\r\n\tr_teleport_a = transform(b0_mat, transform(a_mat_inv, r_teleport_a));\r\n\tr_teleport_b = transform(a_mat, transform(b0_mat_inv, r_teleport_b));\r\n\r\n\tint material = size;\r\n\tif (material > 10) { material = 10; }\r\n\r\n\tif (nearer(result.scene.hit, hit_a)) {\r\n\t\tint is_inside = is_inside_portal_advanced(pos_a, hit_a.u, hit_a.v, is_collinear(hit_a.n, normal_a), true, size, solid_0_M + material);\r\n\t\tif (is_inside != NOT_INSIDE) {\r\n\t\t\tresult.scene = process_portal_intersection(result.scene, hit_a, is_inside, CUSTOM_MATERIAL);\r\n\t\t\tif (result.scene.material == CUSTOM_MATERIAL) {\r\n\t\t\t\tresult.material = material_teleport_transformed(offset_ray(r_teleport_a, hit_a.t));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// -----------------------------------------------------------------------\r\n\r\n\tvec3 normal3 = normalize_normal(normal_b.xyz, r.d.xyz);\r\n\tRay r3 = transform(b0_mat_inv, r_b);\r\n\tfloat len = length(r3.d);\r\n\tr3 = normalize_ray(r3);\r\n\r\n\tSurfaceIntersection hit_b = plane_intersect_normalized(r3);\r\n\tif (hit_b.hit) {\r\n\t    hit_b.t /= len;\r\n\t    hit_b.n = normal3;\r\n\t}\r\n\r\n\tif (nearer(result.scene.hit, hit_b)) {\r\n\t\tint is_inside = is_inside_portal_advanced(r.o + r.d * hit_b.t, hit_b.u, hit_b.v, is_collinear(hit_b.n, normal_b.xyz), false, size, solid_0_M + material);\r\n\t\tif (is_inside != NOT_INSIDE) {\r\n\t\t\tresult.scene = process_portal_intersection(result.scene, hit_b, is_inside, CUSTOM_MATERIAL);\r\n\t\t\tif (result.scene.material == CUSTOM_MATERIAL) {\r\n\t\t\t\tresult.material = material_teleport_transformed(offset_ray(r_teleport_b, hit_b.t));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tr_b = transform(a_mat, transform(b0_mat_inv, r_b));\r\n\tnormal_b = b0_mat * (a_mat_inv * normal_b);\r\n}\r\n\r\nreturn result;\r\n"))),"portal in portal")},storage_order:[(0),(1)]),library:(ids:(available:[],max:6),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n        return TELEPORT;\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}\n\nint ellipse_portal(float x, float y, bool back, bool first, int not_teleport_material) {\nfloat distance = 0.;\nif (shape_u == 0) {\n  distance = ellipse_distance(x, y);\n} else if (shape_u == 1) {\n  distance = circle_distance(x, y);\n} else if (shape_u == 2) {\n  distance = square_distance(x, y);\n}\n\nreturn is_inside_portal(\n  distance, \n  1., \n  border_size_u,\n  black_border_size_u,\n  portal_orange_M, \n  portal_blue_M, \n  not_teleport_material, \n  not_teleport_material, \n  back,\n  first\n);\n}\n\nbool definitely_not_in_portal(float x, float y) {\n  return !(abs(x) < 2.2 && abs(y) < 2.2);\n}")),"portal"),(2):Named((("int is_inside_portal_advanced(vec4 pos, float x, float y, bool back, bool first, int size, int material) {\r\nif (show_teleported_u < size && !first) return NOT_INSIDE;\r\n\r\nif (definitely_not_in_portal(x, y)) return NOT_INSIDE;\r\n\r\nvec4 pos1 = pos;\r\nif (filter_teleported_u == 1 || first) {\r\n\tif (!first && (a_mat_inv * pos1).z < 0.) return NOT_INSIDE;\r\n\r\n\tvec4 pos2 = pos1;\r\n\tif (first) {\r\n\t\tpos2 = a_mat_inv * (b0_mat * (a_mat_inv * pos2));\r\n\t} else {\r\n\t\tpos2 = b0_mat_inv * pos2;\r\n\t}\r\n\tfor (int i = 0; i < 50; ++i) {\n\t\tif (i >= size) break;\r\n\t\tif (pos2.z > 0.) return NOT_INSIDE;\r\n\t\tif (first) {\r\n\t\t\tpos2 = a_mat_inv * (b0_mat * pos2);\r\n\t\t} else {\r\n\t\t\tpos2 = b0_mat_inv * (a_mat * pos2);\r\n\t\t}\r\n\t}\r\n\tif (first && pos2.z < 0.) return NOT_INSIDE;\n}\r\n\r\nreturn ellipse_portal(x, y, back, first, material);\r\n}")),"portal_advanced"),(3):Named((("float DigitBin(const in int x)\r\n{\r\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\r\n}\n\n\rfloat PrintValue(vec2 fragCoord, vec2 pixelCoord, vec2 fontSize, float value,\r\n\t\tfloat digits, float decimals) {\r\n\tvec2 charCoord = (fragCoord - pixelCoord) / fontSize;\r\n\tif(charCoord.y < 0.0 || charCoord.y >= 1.0) return 0.0;\r\n\tfloat bits = 0.0;\r\n\tfloat digitIndex1 = digits - floor(charCoord.x)+ 1.0;\r\n\tif(- digitIndex1 <= decimals) {\r\n\t\tfloat pow1 = pow(10.0, digitIndex1);\r\n\t\tfloat absValue = abs(value);\r\n\t\tfloat pivot = max(absValue, 1.5) * 10.0;\r\n\t\tif(pivot < pow1) {\r\n\t\t\tif(value < 0.0 && pivot >= pow1 * 0.1) bits = 1792.0;\r\n\t\t} else if(digitIndex1 == 0.0) {\r\n\t\t\tif(decimals > 0.0) bits = 2.0;\r\n\t\t} else {\r\n\t\t\tvalue = digitIndex1 < 0.0 ? fract(absValue) : absValue * 10.0;\r\n\t\t\tbits = DigitBin(int (mod(value / pow1, 10.0)));\r\n\t\t}\r\n\t}\r\n\treturn floor(mod(bits / pow(2.0, floor(fract(charCoord.x) * 4.0) + floor(charCoord.y * 5.0) * 4.0), 2.0));\r\n}\n\nfloat number(vec2 fragCoord, vec2 pixelCoord, vec2 fontSize, float value) {\n  return 1. - PrintValue(fragCoord, pixelCoord, fontSize, value, 0., 0.);\n}")),"digit"),(4):Named((("float draw_digits_spiral(vec2 uv, vec2 fontSize, int count) {\r\n  float result = 1.;\r\n  int x = 0;\r\n  int y = 0;\r\n  int lap = 1; // Tracks the current lap. The value also indirectly tracks the maximum number of steps in current lap direction.\r\n  int steps = 0; // Tracks number of steps taken in the current lap direction.\r\n  int direction = 0; // 0: Right, 1: Up, 2: Left, 3: Down\r\n  int stepLimit = 1; // Tracks steps limit in the current direction.\r\n\r\n  // Define your loop maximum, adjust based on your needs.\r\n  for (int i = 0; i < 100; ++i) {\r\n    if (i >= count) break;\r\n    // Use the coordinates: (x, y)\r\n    result *= number(uv, vec2(float(x), float(y)), fontSize, float(i));\r\n\r\n    // Move to the next cell in the current direction.\r\n    if (direction == 0) x += 1;\r\n    else if (direction == 1) y -= 1;\r\n    else if (direction == 2) x -= 1;\r\n    else if (direction == 3) y += 1;\r\n\r\n    steps++;\r\n\r\n    // Change direction logic.\r\n    if (steps == stepLimit) {\r\n      direction = direction + 1; // Change direction.\r\n      if (direction >= 4) direction = 0;\r\n      steps = 0; // Reset step counter for the new direction.\r\n      // After completing a lap in the horizontal directions (right/left), increment step limit.\r\n      if (direction == 0 || direction == 2) {\r\n        lap++; // Completed a lap, increase its range.\r\n        stepLimit = lap;\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n")),"spiral"),(5):Named((("float digits1(SurfaceIntersection hit) {\n  return 1.;\n  //return draw_digits_spiral(vec2(-hit.u, hit.v)*4., vec2(4,5) * vec2(5,3)/200., 50);\n}")),"for_material")},storage_order:[(0),(1),(3),(4),(5),(2)]),animations_filters:(uniforms:({((2)):false,((18)):true,((30)):false,((12)):true,((9)):true,((1)):false,((8)):true,((6)):true,((29)):false,((24)):true,((21)):true,((0)):false,((31)):false,((33)):true,((35)):true,((45)):true,((23)):true,((7)):true,((32)):true,((14)):true,((34)):true,((17)):true,((10)):true,((38)):true,((22)):true}),matrices:({((22)):false,((51)):false,((16)):false,((46)):false,((20)):false,((15)):false,((47)):false,((14)):true,((18)):false,((23)):false,((24)):false,((54)):false,((17)):false,((0)):false,((13)):false,((44)):true,((45)):false,((19)):false,((21)):false}),cameras:({((2)):true,((1)):false,((0)):false})),elements_descriptions:(uniforms:({((35)):(help_description:None,overrided_name:"Use teleported matrix"),((6)):(help_description:None,overrided_name:"Teleport light"),((24)):(help_description:None,overrided_name:"Z"),((17)):(help_description:None,overrided_name:"Filter not teleported parts"),((21)):(help_description:None,overrided_name:""),((18)):(help_description:None,overrided_name:"Teleported parts count"),((14)):(help_description:None,overrided_name:"Speed"),((33)):(help_description:None,overrided_name:"Scale"),((8)):(help_description:None,overrided_name:"Subspace teleportation degree"),((45)):(help_description:None,overrided_name:"Not disable orange portal"),((9)):(help_description:None,overrided_name:"Regular teleportation degree"),((7)):(help_description:None,overrided_name:"Progress"),((30)):(help_description:None,overrided_name:"Border size"),((29)):(help_description:None,overrided_name:"Portal shape"),((38)):(help_description:None,overrided_name:"Progress"),((32)):(help_description:None,overrided_name:"Angle"),((12)):(help_description:None,overrided_name:"Teleport light for subspace"),((10)):(help_description:None,overrided_name:"Filter teleported"),((34)):(help_description:None,overrided_name:"Offset"),((31)):(help_description:None,overrided_name:"Black border size"),((23)):(help_description:None,overrided_name:"Y"),((22)):(help_description:None,overrided_name:"X")}),matrices:({((13)):(help_description:None,overrided_name:""),((14)):(help_description:None,overrided_name:"Blue portal"),((44)):(help_description:None,overrided_name:"")}),cameras:({((1)):(help_description:None,overrided_name:"Blue portal"),((2)):(help_description:None,overrided_name:""),((0)):(help_description:None,overrided_name:"Orange portal")})),user_uniforms:(uniforms:({((35)):false,((0)):false,((29)):false,((1)):false,((12)):true,((22)):false,((9)):true,((34)):false,((10)):true,((14)):false,((38)):false,((32)):false,((8)):true,((17)):true,((23)):false,((6)):true,((31)):false,((18)):true,((21)):false,((2)):false,((24)):false,((7)):true,((30)):false,((45)):false,((33)):false}),matrices:({((45)):false,((15)):false,((22)):false,((13)):false,((18)):false,((54)):false,((21)):false,((0)):false,((24)):false,((51)):false,((17)):false,((14)):true,((23)):false,((46)):false,((19)):false,((47)):false,((16)):false,((44)):false,((20)):false})),animation_stages:(ids:(available:[],max:0),storage:{},storage_order:[]),current_stage:None,dev_stage:(uniforms:({((6)):Bool(true),((31)):Formula(("0.01")),((10)):Bool(true),((0)):Float((min:Some(0),max:None,value:4)),((30)):Formula(("0.035")),((29)):Int((min:Some(0),max:Some(2),value:1)),((7)):Bool(false),((8)):Int((min:Some(0),max:None,value:21)),((2)):Float((min:Some(0),max:None,value:4)),((12)):Bool(true),((9)):Int((min:Some(0),max:None,value:5)),((1)):Float((min:Some(0),max:None,value:4))}),matrices:({((13)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((16)):Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((15)))),((15)):Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((14)))),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((14)):Simple(offset:(0,0,-0.36),scale:0.6,rotate:(4.71238898038469,4.066617157146788,3.8746309394274117),mirror:(true,false,false))})),use_time:false)