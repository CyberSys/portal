(desc:(eng:"This scene shows concept of a \"support portals\", which is used in other scenes.",rus:"Эта сцена показывает концепцию \"поддерживающих порталов\", которые используются в некоторых сценах."),cam:(look_at:(0,0,0),alpha:-80.5713673703539,beta:1.016996704339983,r:3.500000000000075,offset_after_material:0.000025),uniforms:(ids:(available:[(22),(23),(24),(25)],max:31),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Formula(("1-doorway_progress")),"portal_black_color_progress"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(9):Named(Progress(0.31),"angle_progress"),(10):Named(Float((min:Some(0),max:None,value:0.5)),"len"),(11):Inline(Formula(("-len*cos(angle)"))),(12):Named(Formula(("angle_progress*pi()/2*0.99")),"angle"),(13):Inline(Formula(("len*cos(angle)"))),(14):Inline(Formula(("-angle"))),(15):Inline(Formula(("angle"))),(16):Named(Progress(0),"object_progress"),(17):Named(Progress(1),"doorway_progress"),(18):Inline(Progress(0)),(19):Inline(Formula(("0.65+(1-object_progress)"))),(20):Inline(Bool(true)),(21):Inline(Progress(1)),(26):Named(Bool(false),"enable_support"),(27):Named(Progress(0),"offset_progress"),(28):Named(Formula(("-sin(angle)*len")),"support_offset"),(29):Inline(Formula(("offset_progress*0.5"))),(30):Inline(Formula(("-offset_progress*0.5")))},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(12),(16),(17),(28),(26),(27)]),matrices:(ids:(available:[(27),(28),(29),(30),(31),(32)],max:46),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(0,0,0.9),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"a"),(14):Named(Simple(offset:(0,0,-0.13),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"b"),(15):Named(Mul(to:Some(((24))),what:Some(((23)))),"left"),(16):Named(Mul(to:Some(((22))),what:Some(((21)))),"right"),(17):Inline(Mul(to:Some(((15))),what:Some(((13))))),(18):Inline(Mul(to:Some(((36))),what:Some(((14))))),(19):Inline(Mul(to:Some(((16))),what:Some(((13))))),(20):Inline(Mul(to:Some(((33))),what:Some(((14))))),(21):Inline(Parametrized(offset:(x:Yes(Some(((13)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(22):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((14)))),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(23):Inline(Parametrized(offset:(x:Yes(Some(((11)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(24):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((15)))),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(25):Named(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((19))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(0.2)),"object"),(26):Inline(Teleport(first_portal:Some(((13))),second_portal:Some(((37))),what:Some(((25))))),(33):Inline(Mul(to:Some(((16))),what:Some(((34))))),(34):Named(Parametrized(offset:(x:Yes(Some(((29)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),"off1"),(35):Named(Parametrized(offset:(x:Yes(Some(((30)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),"off2"),(36):Inline(Mul(to:Some(((15))),what:Some(((35))))),(37):Inline(Mul(to:Some(((14))),what:Some(((34))))),(38):Inline(Teleport(first_portal:Some(((13))),second_portal:Some(((39))),what:Some(((25))))),(39):Inline(Mul(to:Some(((14))),what:Some(((35))))),(40):Inline(Mul(to:Some(((42))),what:Some(((14))))),(41):Inline(Mul(to:Some(((44))),what:Some(((14))))),(42):Inline(Mul(to:Some(((43))),what:Some(((34))))),(43):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((28))))),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(44):Inline(Mul(to:Some(((45))),what:Some(((35))))),(45):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((28))))),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)))},storage_order:[(0),(13),(14),(15),(16),(25),(34),(35)]),objects:(ids:(available:[],max:12),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);"))),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);"))),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);"))),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);"))),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);"))),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);"))),"room_z-"),(6):Named(Flat(kind:Portal(Some(((17))),Some(((18)))),is_inside:(("if (x > len_u) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  rect_distance(x, y, len_u, 0.5),\n  1.0,\n  0.05,\n  0.01,\n  portal_blue_black_M,\n  portal_orange_black_M,\n  grid_gray_M,\n  grid_gray_M,\n  back,\n  first\n);"))),"left"),(7):Named(Flat(kind:Portal(Some(((19))),Some(((20)))),is_inside:(("if (x < -len_u) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  rect_distance(x, y, len_u, 0.5),\n  1.0,\n  0.05,\n  0.01,\n  portal_blue_black_M,\n  portal_orange_black_M,\n  grid_gray_M,\n  grid_gray_M,\n  back,\n  first\n);"))),"right"),(8):Named(Complex(kind:Simple(Some(((25)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\n\nvec4 pos1 = (a_mat_inv * (object_mat * pos));\nif (pos1.x > 0.) {\n  if ((right_mat_inv * pos1).z < 0.) {\n    return scene_intersection_none;\n  }\n} else {\n  if ((left_mat_inv * pos1).z < 0.) {\n    return scene_intersection_none;\n  }\n}\n\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n), false);"))),"object"),(9):Named(Complex(kind:Simple(Some(((26)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nvec4 pos = r.o + r.d * t;\nvec4 pos1 = (a_mat_inv * (object_mat * pos));\nif (pos1.x < 0. || (pos1.x >= 0. && (right_mat_inv * pos1).z > 0.) || t < 0.) t = b + det;\npos = r.o + r.d * t;\npos1 = (a_mat_inv * (object_mat * pos));\nif (pos1.x < 0. || (pos1.x >= 0. && (right_mat_inv * pos1).z > 0.) || t < 0.) return scene_intersection_none;\n\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n), false);"))),"object_teleported"),(10):Named(Complex(kind:Simple(Some(((38)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nvec4 pos = r.o + r.d * t;\nvec4 pos1 = (a_mat_inv * (object_mat * pos));\nif (pos1.x > 0. || (pos1.x <= 0. && (left_mat_inv * pos1).z > 0.) || t < 0.) t = b + det;\npos = r.o + r.d * t;\npos1 = (a_mat_inv * (object_mat * pos));\nif (pos1.x > 0. || (pos1.x <= 0. && (left_mat_inv * pos1).z > 0.) || t < 0.) return scene_intersection_none;\n\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n), false);"))),"object_teleported2"),(11):Named(Flat(kind:Portal(Some(((40))),Some(((41)))),is_inside:(("if (enable_support_u == 0) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  circle_distance(x, y),\n  0.7,\n  0.05,\n  0.01,\n  portal_green_M,\n  portal_green_M,\n  grid_gray_M,\n  grid_gray_M,\n  back,\n  first\n);"))),"support_portals")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)]),cameras:(ids:(available:[],max:0),storage:{},storage_order:[]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:22),storage:{(0):Named(Simple(color:(0.7647179,0.7024815,0.061205085),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_yellow"),(1):Named(Simple(color:(0.029196177,0.029196177,0.029196177),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_black"),(2):Named(Simple(color:(0.8458183,0.07454156,0.07454156),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_red"),(3):Named(Simple(color:(0.18068509,0.18068509,0.18068509),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_gray"),(4):Named(Simple(color:(0.116810285,0.26798066,0.9083436),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_blue"),(5):Named(Simple(color:(0.15478948,0.73873776,0.2186588),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.15478948,0.73873776,0.2186588), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(1.16810285e-1, 2.6798066e-1, 9.083436e-1), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black"),(21):Named(Simple(color:(0.33725490196078434,0.8470588235294118,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_green")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14),(21)]),library:(ids:(available:[],max:4),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}")),"portal")},storage_order:[(2),(0),(1),(3)]),animations_filters:(uniforms:({((9)):true,((26)):true,((0)):false,((10)):false,((16)):true,((7)):true,((2)):false,((1)):false,((6)):false,((17)):true,((12)):false,((28)):false,((27)):true,((8)):false}),matrices:({((14)):true,((25)):true,((35)):false,((16)):false,((0)):false,((34)):false,((15)):false,((13)):true}),cameras:({})),elements_descriptions:(uniforms:({((27)):(help_description:None,overrided_name:"Separate progress"),((17)):(help_description:None,overrided_name:"Convert to portal"),((7)):(help_description:None,overrided_name:"Teleport light"),((9)):(help_description:None,overrided_name:"Curvature progress"),((16)):(help_description:None,overrided_name:"Move object"),((26)):(help_description:None,overrided_name:"")}),matrices:({((13)):(help_description:None,overrided_name:""),((14)):(help_description:None,overrided_name:""),((25)):(help_description:None,overrided_name:"")}),cameras:({})),user_uniforms:(uniforms:({((8)):false,((6)):false,((10)):false,((9)):false,((1)):false,((26)):false,((0)):false,((7)):true,((16)):false,((2)):false,((27)):false,((17)):false,((28)):false,((12)):false}),matrices:({((25)):false,((14)):false,((35)):false,((16)):false,((0)):false,((13)):false,((15)):false,((34)):false})),animation_stages:(ids:(available:[],max:3),storage:{(0):Named((name:(eng:"What if we separate parts?",rus:"Что если мы разделим части?"),description:Some((eng:"Surface portal consist of two parts on each side. What if we separate these two parts on one side? We will get bad portal, that we won\'t use in real life.",rus:"Поверхностный портал состоит из двух частей. Что если мы разделим их на одной стороне? Получится плохой портал, который мы бы не хотели видеть в реальной жизни.")),uniforms:({((17)):FromDev,((6)):FromDev,((7)):FromDev,((10)):FromDev,((28)):FromDev,((27)):ChangedAndToUser(Some(((18)))),((0)):FromDev,((12)):FromDev,((16)):FromDev,((2)):FromDev,((26)):FromDev,((1)):FromDev,((9)):FromDev,((8)):FromDev}),matrices:({((14)):FromDev,((16)):FromDev,((35)):FromDev,((34)):FromDev,((13)):FromDev,((15)):FromDev,((0)):FromDev,((25)):FromDev}),original_cam_button:false,set_cam:None,cams:{}),"Separate parts"),(1):Named((name:(eng:"And move object inside",rus:"И поместим внутрь объект"),description:Some((eng:"What happens if we put an object into it? It will cut in two parts.",rus:"И что будет если поместить в такой портал объект? Он разрежется на две части.")),uniforms:({((17)):FromDev,((27)):FromDev,((9)):FromDev,((8)):FromDev,((6)):FromDev,((0)):FromDev,((7)):FromDev,((1)):FromDev,((10)):FromDev,((26)):FromDev,((12)):FromDev,((2)):FromDev,((28)):FromDev,((16)):ProvidedToUser}),matrices:({((13)):FromDev,((35)):FromDev,((16)):FromDev,((15)):FromDev,((14)):FromDev,((25)):FromDev,((0)):FromDev,((34)):FromDev}),original_cam_button:false,set_cam:None,cams:{}),"And move object inside"),(2):Named((name:(eng:"And add support portals to fix cuts",rus:"И добавим поддерживающие порталы"),description:Some((eng:"But, it can be fixed by using two extra portals in the cut position. These additional portals called \"support portals\" and will be used in some scenes to provide impossible results.\n\nRight here you witness so-called triple portal. I discoreved it exactly as shown here at 3am many years ago, when trying to contradict portal integrity axiom, that I come up that day.\n\n*Integrity axiom:**every object, that comes into portal, must exit undestroyed; all it parts must preserve their relative positions.",rus:"Но! Это можно пофиксить, если в местах разреза добавить дополнительные порталы, которые будут обеспечивать целостность разрезаемого объекта.\n\nЭти дополнительные порталы называются \"поддерживающими порталами\", и будут использоваться в множестве сцен. Некоторые порталы невозможно создать без них.\n\nА прямо здесь вы наблюдаете тройной портал. Именно так я и изобрёл его в 3 часа ночи много лет назад, когда пытался опровегнуть придуманную в тот день портальную аксиому целостности.\n\n*Аксиома целостности* - любой объект, входящий в портал, обязан выйти неразрушенным; все его части должны сохранить относительное расположение относительно друг друга.")),uniforms:({((28)):FromDev,((16)):Changed(Some(((21)))),((27)):FromDev,((1)):FromDev,((9)):FromDev,((17)):FromDev,((10)):FromDev,((26)):Changed(Some(((20)))),((8)):FromDev,((0)):FromDev,((6)):FromDev,((2)):FromDev,((12)):FromDev,((7)):FromDev}),matrices:({((13)):FromDev,((14)):FromDev,((16)):FromDev,((34)):FromDev,((35)):FromDev,((25)):FromDev,((15)):FromDev,((0)):FromDev}),original_cam_button:false,set_cam:None,cams:{}),"And add support portals to fix cuts")},storage_order:[(0),(1),(2)]),current_stage:Some(((0))),dev_stage:(uniforms:({((1)):Float((min:Some(0),max:None,value:4)),((8)):Bool(false),((16)):Progress(0),((6)):Formula(("1-doorway_progress")),((26)):Bool(false),((10)):Float((min:Some(0),max:None,value:0.5)),((12)):Formula(("angle_progress*pi()/2*0.99")),((27)):Progress(1),((2)):Float((min:Some(0),max:None,value:4)),((0)):Float((min:Some(0),max:None,value:4)),((7)):Bool(true),((9)):Progress(0.31),((17)):Progress(1),((28)):Formula(("-sin(angle)*len"))}),matrices:({((13)):Simple(offset:(0,0,0.9),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((25)):Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((19))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(0.2)),((35)):Parametrized(offset:(x:Yes(Some(((30)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),((14)):Simple(offset:(0,0,-0.13),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((15)):Mul(to:Some(((24))),what:Some(((23)))),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((16)):Mul(to:Some(((22))),what:Some(((21)))),((34)):Parametrized(offset:(x:Yes(Some(((29)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))})),use_time:false)