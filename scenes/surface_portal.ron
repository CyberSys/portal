(desc:(eng:"Linear portals can be not only flat, but also 3D, or more specifically, they can lie on some 3D surface. I.e. input and output of a portal remain flat, but that flatness is distributed on a 3D surface.\n\nThis scene shows how you can build surface portal from a 3D doorway. This surface portals work just like regular linear portal.\n\nWe can see through that portal, because light ray intersects it twice.",rus:"Линейные порталы могут быть не только плоскими, но ещё и объёмными, а точнее, они могут находиться на какой-то поверхности. То есть вход портала так же остаётся двумерным, но эта двумерность может быть размазана по объёмной поверхности.\n\nВ данной сцене показывается что из объёмного дверного проёма можно создать поверхностные порталы, и они работает точно так же, как и обычные порталы.\n\nМы можем видеть сквозь бок такого портал, потому что световой луч проходит сквозь него дважды."),cam:(look_at:(0,0,0),alpha:-57.04805222438408,beta:1.119048280715942,r:2.6296018031555675,offset_after_material:0.000025),uniforms:(ids:(available:[],max:26),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Formula(("1-doorway_progress")),"portal_black_color_progress"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(9):Named(Progress(0.35),"angle_progress"),(10):Named(Float((min:Some(0),max:None,value:0.5)),"len"),(11):Inline(Formula(("-len*cos(angle)"))),(12):Named(Formula(("angle_progress*pi()/2*0.99")),"angle"),(13):Inline(Formula(("len*cos(angle)"))),(14):Inline(Formula(("-angle"))),(15):Inline(Formula(("angle"))),(16):Named(Progress(1),"object_progress"),(17):Named(Progress(1),"doorway_progress"),(18):Inline(Progress(0)),(19):Inline(Progress(0)),(20):Inline(Formula(("-doorway_progress"))),(21):Inline(Formula(("doorway_progress+0.0001"))),(22):Inline(Progress(0.35)),(23):Inline(Progress(0)),(24):Inline(Progress(1)),(25):Inline(Formula(("-object_progress*2")))},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(12),(16),(17)]),matrices:(ids:(available:[],max:33),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(0,0,-1),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"a"),(14):Named(Simple(offset:(0,0,1),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"b"),(15):Named(Mul(to:Some(((24))),what:Some(((23)))),"left"),(16):Named(Mul(to:Some(((22))),what:Some(((21)))),"right"),(17):Inline(Mul(to:Some(((15))),what:Some(((13))))),(18):Inline(Mul(to:Some(((15))),what:Some(((14))))),(19):Inline(Mul(to:Some(((16))),what:Some(((13))))),(20):Inline(Mul(to:Some(((16))),what:Some(((14))))),(21):Inline(Parametrized(offset:(x:Yes(Some(((13)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(22):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((14)))),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(23):Inline(Parametrized(offset:(x:Yes(Some(((11)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(24):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((15)))),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(25):Named(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((25))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(0.2)),"object"),(26):Inline(Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((25))))),(27):Inline(Simple(offset:(0,10,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(28):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((21))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(29):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((20))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(30):Inline(Simple(offset:(0,0,-1),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(31):Inline(Simple(offset:(0,0,1),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(32):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((25))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(0.2)))},storage_order:[(0),(13),(14),(15),(16),(25)]),objects:(ids:(available:[],max:10),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);"))),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);"))),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);"))),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);"))),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);"))),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);"))),"room_z-"),(6):Named(Flat(kind:Portal(Some(((17))),Some(((18)))),is_inside:(("if (x > len_u) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  rect_distance(x, y, len_u, 0.5),\n  1.0,\n  0.05,\n  0.01,\n  portal_blue_black_M,\n  portal_orange_black_M,\n  grid_gray_M,\n  grid_gray_M,\n  back,\n  first\n);"))),"left"),(7):Named(Flat(kind:Portal(Some(((19))),Some(((20)))),is_inside:(("if (x < -len_u) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  rect_distance(x, y, len_u, 0.5),\n  1.0,\n  0.05,\n  0.01,\n  portal_blue_black_M,\n  portal_orange_black_M,\n  grid_gray_M,\n  grid_gray_M,\n  back,\n  first\n);"))),"right"),(8):Named(Complex(kind:Simple(Some(((25)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\n\nvec4 pos1 = (a_mat_inv * (object_mat * pos));\nif (pos1.x > 0.) {\n  if ((right_mat_inv * pos1).z < 0.) {\n    return scene_intersection_none;\n  }\n} else {\n  if ((left_mat_inv * pos1).z < 0.) {\n    return scene_intersection_none;\n  }\n}\n\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n), false);"))),"object"),(9):Named(Complex(kind:Simple(Some(((26)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\n\nvec4 pos1 = (a_mat_inv * (object_mat * pos));\nif (pos1.x > 0.) {\n  if ((right_mat_inv * pos1).z > 0.) {\n    return scene_intersection_none;\n  }\n} else {\n  if ((left_mat_inv * pos1).z > 0.) {\n    return scene_intersection_none;\n  }\n}\n\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n), false);"))),"object_teleported")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8),(9)]),cameras:(ids:(available:[],max:0),storage:{},storage_order:[]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:21),storage:{(0):Named(Simple(color:(0.8980392156862745,0.8313725490196079,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_yellow"),(1):Named(Simple(color:(0.050980392156862744,0.050980392156862744,0.050980392156862744),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_black"),(2):Named(Simple(color:(0.9058823529411765,0.29411764705882354,0.29411764705882354),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_red"),(3):Named(Simple(color:(0.2235294117647059,0.2235294117647059,0.2235294117647059),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_gray"),(4):Named(Simple(color:(0.3137254901960784,0.38823529411764707,0.9254901960784314),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_blue"),(5):Named(Simple(color:(0.2627450980392157,0.8470588235294118,0.30196078431372547),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple2(hit, r, vec3(2.627450980392157e-1, 8.470588235294118e-1, 3.0196078431372547e-1), 5e-1, true, 1.0, 3e-1, false, true);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple2(hit, r, vec3(3.137254901960784e-1, 3.8823529411764707e-1, 9.254901960784314e-1), 5e-1, true, 1.0, 3e-1, false, true);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14)]),library:(ids:(available:[],max:4),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}")),"portal")},storage_order:[(2),(0),(1),(3)]),animations_filters:(uniforms:({((16)):true,((6)):false,((8)):false,((7)):true,((2)):false,((10)):false,((1)):false,((17)):true,((12)):false,((0)):false,((9)):true}),matrices:({((25)):true,((16)):false,((15)):false,((0)):false,((13)):true,((14)):true}),cameras:({})),elements_descriptions:(uniforms:({((9)):(help_description:None,overrided_name:"Curvature progress"),((16)):(help_description:None,overrided_name:"Move object"),((7)):(help_description:None,overrided_name:"Teleport light"),((17)):(help_description:None,overrided_name:"Convert to portal")}),matrices:({((14)):(help_description:None,overrided_name:""),((25)):(help_description:None,overrided_name:""),((13)):(help_description:None,overrided_name:"")}),cameras:({})),user_uniforms:(uniforms:({((17)):false,((8)):false,((6)):false,((1)):false,((0)):false,((12)):false,((10)):false,((7)):true,((16)):false,((9)):false,((2)):false}),matrices:({((14)):false,((13)):false,((16)):false,((15)):false,((0)):false,((25)):false})),animation_stages:(ids:(available:[],max:2),storage:{(0):Named((name:(eng:"Surface portal",rus:"Поверхностный портал"),description:None,uniforms:({((2)):FromDev,((16)):FromDev,((9)):ChangedAndToUser(Some(((18)))),((0)):FromDev,((6)):FromDev,((10)):FromDev,((7)):FromDev,((8)):FromDev,((1)):FromDev,((12)):FromDev,((17)):ChangedAndToUser(Some(((19))))}),matrices:({((15)):FromDev,((13)):Changed(Some(((28)))),((25)):Changed(Some(((27)))),((16)):FromDev,((0)):FromDev,((14)):Changed(Some(((29))))}),original_cam_button:false,set_cam:None,cams:{}),"Surface portal"),(1):Named((name:(eng:"Explore",rus:"Исследование"),description:None,uniforms:({((17)):Changed(Some(((24)))),((9)):Changed(Some(((22)))),((1)):FromDev,((8)):FromDev,((10)):FromDev,((6)):FromDev,((7)):FromDev,((12)):FromDev,((2)):FromDev,((0)):FromDev,((16)):ChangedAndToUser(Some(((23))))}),matrices:({((25)):Changed(Some(((32)))),((13)):Changed(Some(((30)))),((16)):FromDev,((14)):Changed(Some(((31)))),((0)):FromDev,((15)):FromDev}),original_cam_button:false,set_cam:None,cams:{}),"Explore")},storage_order:[(0),(1)]),current_stage:Some(((1))),dev_stage:(uniforms:({((0)):Float((min:Some(0),max:None,value:4)),((16)):Progress(0),((6)):Formula(("1-doorway_progress")),((2)):Float((min:Some(0),max:None,value:4)),((12)):Formula(("angle_progress*pi()/2*0.99")),((10)):Float((min:Some(0),max:None,value:0.5)),((9)):Progress(0.45),((1)):Float((min:Some(0),max:None,value:4)),((17)):Progress(1),((7)):Bool(true),((8)):Bool(false)}),matrices:({((13)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((14)):Simple(offset:(0,0,1.38),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((16)):Mul(to:Some(((22))),what:Some(((21)))),((25)):Simple(offset:(0,0,0.45),scale:0.2,rotate:(0,0,0),mirror:(false,false,false)),((15)):Mul(to:Some(((24))),what:Some(((23)))),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))})),use_time:false)