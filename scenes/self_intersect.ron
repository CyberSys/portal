(desc:(eng:"What if the portal is on a fabric, and that fabric goes into itself? That is, what happens not if one part of the portal goes into another, but what if a part goes into itself.\n\nThese are the questions that this scene answers.\n\nSimulated using hemispherical portals so as not to create teleported copies of the parts. It can be done according to the axiom of portals about different surface with the same frames.",rus:"Что если портал будет на ткани, а эта ткань будет заходить сама в себя? То есть что будет не если одна часть портала войдёт в другую, а что если часть войдёт сама в себя.\r\n\r\nИменно на эти вопросы отвечает данная сцена.\r\n\r\nСимулировано с помощью полусферических порталов, чтобы не создавать телепортированные копии частей. Это можно делать согласно аксиоме порталов про разную поверхность при одинаковых рамках."),cam:(look_at:(0,0,0),alpha:0.8955789290832066,beta:1.298672485351577,r:3.8500000000000534,offset_after_material:0.000025),uniforms:(ids:(available:[],max:17),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Progress(0),"portal_black_color_progress"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(9):Named(Progress(0.95),"a"),(10):Named(Bool(true),"two_sided"),(11):Named(Formula(("0.05")),"border"),(12):Named(Formula(("0.01")),"black_border"),(13):Named(Progress(0.5),"b"),(14):Named(Progress(0.61),"c"),(15):Inline(Formula(("a-b"))),(16):Inline(Formula(("a-2*b")))},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(11),(12),(13),(14)]),matrices:(ids:(available:[],max:26),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(0,0,-2),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"a"),(14):Named(Simple(offset:(0,0,2),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"b"),(15):Named(Parametrized(offset:(x:Yes(Some(((9)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),"circle"),(16):Inline(Mul(to:Some(((15))),what:Some(((13))))),(17):Inline(Mul(to:Some(((15))),what:Some(((14))))),(18):Named(Parametrized(offset:(x:Yes(Some(((15)))),y:No(0),z:No(0)),rotate:(x:No(4.71238898038469),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),"cylinder"),(19):Inline(Mul(to:Some(((18))),what:Some(((13))))),(20):Inline(Mul(to:Some(((18))),what:Some(((14))))),(21):Named(Parametrized(offset:(x:Yes(Some(((16)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(4.6774823953448035),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),"circle2"),(22):Inline(Mul(to:Some(((21))),what:Some(((13))))),(23):Inline(Mul(to:Some(((21))),what:Some(((14))))),(24):Named(Simple(offset:(15,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_red"),(25):Named(Simple(offset:(-15,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_blue")},storage_order:[(0),(13),(14),(15),(18),(21),(24),(25)]),objects:(ids:(available:[],max:13),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);")),in_subspace:Normal),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);")),in_subspace:Normal),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);")),in_subspace:Normal),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);")),in_subspace:Normal),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);")),in_subspace:Normal),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);")),in_subspace:Normal),"room_z-"),(6):Named(Complex(kind:Portal(Some(((13))),Some(((14)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nvec4 pos = r.o + r.d * t;\nif (pos.z > 0. || t < 0. || pos.x > a_u) t = b + det;\npos = r.o + r.d * t;\nif (pos.z > 0. || t < 0. || pos.x > a_u) return scene_intersection_none;\n\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nint material = TELEPORT;\nif (teleport_light_u == 0) material = grid_gray_M;\n\nif (two_sided_u == 0) {\nif ((first && dot(n, r.d.xyz) < 0.) || (!first && dot(n, r.d.xyz) > 0.)) {\nif (first) { material = portal_blue_M;\n} else { material = portal_orange_M; }\n}\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, u, v, n), false);")),in_subspace:Normal),"half-sphere"),(7):Named(Flat(kind:Portal(Some(((13))),Some(((14)))),is_inside:(("if (x > a_u + black_border_u) return NOT_INSIDE;\n\nfloat distance = circle_distance(x, y);\nif (distance < 1. + 2.*black_border_u + border_u && x > a_u && sqr(y) > 1.-a_u*a_u) return solid_black_M;\nif (x > a_u) return NOT_INSIDE;\nif (distance < 1.) distance = 2.;\nint result = is_inside_portal(\n  distance,\n  1.0,\n  border_u,\n  black_border_u,\n  portal_blue_M,\n  portal_orange_M,\n  grid_gray_M,\n  grid_gray_M,\n  false,\n  first\n);\nif (result == TELEPORT) return NOT_INSIDE;\n\nreturn result;")),in_subspace:Normal),"border"),(8):Named(Flat(kind:Portal(Some(((16))),Some(((17)))),is_inside:(("int material = NOT_INSIDE;\r\nif (first) { material = portal_blue_M;\r\n} else { material = portal_orange_M; }\r\n\nfloat height = sqrt(1.-a_u*a_u);\n\nif (x*x + y*y < sqr(height) && x > 0.) {\r\n  if (two_sided_u == 1 || ((back && first) || (back && !first))) {\r\n    if (teleport_light_u == 1) {\r\n      return TELEPORT;\r\n    } else {\r\n      return grid_gray_M;\r\n    }\r\n  } else {\r\n    return material;\r\n  }\r\n} else {\r\n  return NOT_INSIDE;\r\n}")),in_subspace:Normal),"circle"),(9):Named(Complex(kind:Portal(Some(((19))),Some(((20)))),intersect:(("return intersect_cylinder_portal_v2(\n  b_u,\n  border_u,\n  black_border_u,\n  sqrt(1.-a_u*a_u),\n  r,\n  first\n);")),in_subspace:Normal),"cylinder"),(10):Named(Flat(kind:Portal(Some(((22))),Some(((23)))),is_inside:(("x = -x;\nif (x < 0.) return NOT_INSIDE;\n\nx -= c_u;\nif (x < 0.) x = 0.;\n\nfloat height = sqrt(1.-a_u*a_u);\n\nfloat distance = circle_distance(x, y);\nint result = is_inside_portal(\n  distance,\n  height,\n  border_u,\n  black_border_u,\n  portal_blue_M,\n  portal_orange_M,\n  grid_gray_M,\n  grid_gray_M,\n  two_sided_u == 0 && !back,\n  first\n);\n\nreturn result;")),in_subspace:Normal),"circle2"),(11):Named(Complex(kind:Simple(Some(((24)))),intersect:(("return intersect_box(r, room_red_M);")),in_subspace:Normal),"room_red"),(12):Named(Complex(kind:Simple(Some(((25)))),intersect:(("return intersect_box(r, room_blue_M);")),in_subspace:Normal),"room_blue")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)]),cameras:(ids:(available:[],max:5),storage:{(0):Inline((look_at:Coordinate((0,0,0)),alpha:0.8955789290832066,beta:1.298672485351577,r:3.8500000000000534,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(1):Inline((look_at:MatrixCenter(None),alpha:0,beta:0,r:3.5,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1))),(2):Named((look_at:MatrixCenter(Some(((24)))),alpha:0.7765787421630406,beta:1.3312150192260888,r:3.8500000000000534,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)),"room_red"),(3):Named((look_at:MatrixCenter(Some(((25)))),alpha:0.7765787421630406,beta:1.3312150192260888,r:3.8500000000000534,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)),"room_blue"),(4):Inline((look_at:Coordinate((0,0,0)),alpha:1.9777642896685639,beta:0.8430786132812654,r:2.629601803155558,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)))},storage_order:[(2),(3)]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:21),storage:{(0):Named(Simple(color:(0.8980392156862745,0.8313725490196079,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_yellow"),(1):Named(Simple(color:(0.050980392156862744,0.050980392156862744,0.050980392156862744),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_black"),(2):Named(Simple(color:(0.9058823529411765,0.29411764705882354,0.29411764705882354),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_red"),(3):Named(Simple(color:(0.2235294117647059,0.2235294117647059,0.2235294117647059),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_gray"),(4):Named(Simple(color:(0.3137254901960784,0.38823529411764707,0.9254901960784314),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_blue"),(5):Named(Simple(color:(0.2627450980392157,0.8470588235294118,0.30196078431372547),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:true,grid3:false),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple2(hit, r, vec3(2.627450980392157e-1, 8.470588235294118e-1, 3.0196078431372547e-1), 5e-1, true, 1.0, 3e-1, false, true);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple2(hit, r, vec3(3.137254901960784e-1, 3.8823529411764707e-1, 9.254901960784314e-1), 5e-1, true, 1.0, 3e-1, false, true);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14)]),intersection_materials:(ids:(available:[],max:0),storage:{},storage_order:[]),library:(ids:(available:[],max:5),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}")),"portal"),(4):Named((("SceneIntersection intersect_cylinder_portal_v2(\r\n  float cylinder_radius,\r\n  float border_size,\r\n  float black_border_size,\r\n  float cylinder_height,\r\n  Ray r,\r\n  bool first\r\n) {\r\n  float a = dot(r.d.xy, r.d.xy);\r\n  float b = 2.0 * dot(r.o.xy, r.d.xy);\r\n  float c = dot(r.o.xy, r.o.xy) - sqr(cylinder_radius);\r\n  float det = b*b - 4.0 * a * c;\r\n  if (det < 0.) return scene_intersection_none;\r\n\r\n  det = sqrt(det);\r\n\r\n  float t = (-b - det)/(2.*a);\r\n  vec4 pos = r.o + r.d * t;\r\n  float u = atan(pos.y, pos.x) * cylinder_radius;\r\n  float v = pos.z;\r\n  float distance = rect_distance(u, v, PI*cylinder_radius, cylinder_height);\r\n  int result_material = is_inside_portal(\r\n    distance,\r\n    1.0,\r\n    border_size,\r\n    black_border_size,\r\n    portal_blue_M,\r\n    portal_orange_M,\r\n    grid_gray_M,\r\n    grid_gray_M,\r\n    two_sided_u == 0 && invert_if(false, first),\r\n    first\r\n  );\r\n  if (u > 0.) result_material = NOT_INSIDE;\r\n\r\n  if (t < 0. || result_material == NOT_INSIDE) {\r\n    t = (-b + det)/(2.*a);\r\n    pos = r.o + r.d * t;\r\n    u = atan(pos.y, pos.x) * cylinder_radius;\r\n    v = pos.z;\r\n    distance = rect_distance(u, v, PI*cylinder_radius, cylinder_height);\r\n    result_material = is_inside_portal(\r\n      distance,\r\n      1.0,\r\n      border_size,\r\n      black_border_size,\r\n      portal_blue_M,\r\n      portal_orange_M,\r\n      grid_gray_M,\r\n      grid_gray_M,\r\n      two_sided_u == 0 && invert_if(true, first),\r\n      first\r\n    );\r\n    if (u > 0.) result_material = NOT_INSIDE;\r\n    if (t< 0. || result_material == NOT_INSIDE) {\r\n      return scene_intersection_none;\r\n    }\r\n  }\r\n\r\n  vec3 n = normalize(vec3(pos.xy, 0.));\r\n\r\n  return SceneIntersection(result_material, SurfaceIntersection(true, t, u, v, n), false);\r\n}\r\n")),"cylinder")},storage_order:[(2),(0),(1),(3),(4)]),animations_filters:(uniforms:({((6)):false,((8)):false,((12)):false,((14)):false,((9)):false,((13)):false,((11)):false,((1)):false,((2)):false,((7)):true,((0)):false,((10)):true}),matrices:({((21)):false,((24)):true,((15)):false,((0)):false,((25)):true,((18)):false,((14)):true,((13)):true}),cameras:({((3)):true,((2)):true})),elements_descriptions:(uniforms:({((10)):(help_description:None,overrided_name:"Enable second side"),((7)):(help_description:None,overrided_name:"Teleport light")}),matrices:({((14)):(help_description:None,overrided_name:"Orange portal"),((25)):(help_description:None,overrided_name:""),((13)):(help_description:None,overrided_name:"Blue portal"),((24)):(help_description:None,overrided_name:"")}),cameras:({((2)):(help_description:None,overrided_name:"Red room"),((3)):(help_description:None,overrided_name:"Blue room")})),user_uniforms:(uniforms:({((1)):false,((0)):false,((2)):false,((11)):false,((10)):true,((6)):false,((9)):false,((12)):false,((14)):false,((7)):true,((13)):false,((8)):false}),matrices:({((13)):false,((0)):false,((15)):false,((14)):false,((24)):false,((21)):false,((25)):false,((18)):false})),animation_stages:(ids:(available:[],max:3),storage:{(0):Named((name:(eng:"One room",rus:"Одна комната"),description:None,uniforms:({((2)):FromDev,((14)):FromDev,((13)):FromDev,((6)):FromDev,((10)):FromDev,((9)):FromDev,((11)):FromDev,((7)):FromDev,((0)):FromDev,((8)):FromDev,((1)):FromDev,((12)):FromDev}),matrices:({((15)):FromDev,((14)):FromDev,((24)):FromDev,((25)):FromDev,((0)):FromDev,((13)):FromDev,((18)):FromDev,((21)):FromDev}),original_cam_button:false,set_cam:Some(Some(((0)))),cams:{},hidden:false),"One room"),(1):Named((name:(eng:"Two rooms",rus:"Две комнаты"),description:None,uniforms:({((14)):FromDev,((0)):FromDev,((13)):FromDev,((7)):FromDev,((11)):FromDev,((2)):FromDev,((12)):FromDev,((9)):FromDev,((6)):FromDev,((10)):FromDev,((1)):FromDev,((8)):FromDev}),matrices:({((18)):FromDev,((0)):FromDev,((21)):FromDev,((25)):FromDev,((13)):Changed(Some(((24)))),((14)):Changed(Some(((25)))),((15)):FromDev,((24)):FromDev}),original_cam_button:false,set_cam:Some(Some(((2)))),cams:{((3)):true,((2)):true},hidden:false),"Two rooms"),(2):Named((name:(eng:"Explore",rus:"Исследование"),description:None,uniforms:({((9)):FromDev,((6)):FromDev,((2)):FromDev,((1)):FromDev,((8)):FromDev,((12)):FromDev,((13)):FromDev,((10)):FromDev,((7)):FromDev,((14)):FromDev,((0)):FromDev,((11)):FromDev}),matrices:({((13)):ProvidedToUser,((18)):FromDev,((14)):ProvidedToUser,((15)):FromDev,((25)):FromDev,((24)):FromDev,((21)):FromDev,((0)):FromDev}),original_cam_button:false,set_cam:Some(Some(((4)))),cams:{((2)):false,((3)):false},hidden:false),"Explore")},storage_order:[(0),(1),(2)]),current_stage:Animation(((0))),dev_stage:(uniforms:({((12)):Formula(("0.01")),((6)):Progress(0),((11)):Formula(("0.05")),((13)):Progress(0.5),((0)):Float((min:Some(0),max:None,value:4)),((8)):Bool(false),((1)):Float((min:Some(0),max:None,value:4)),((2)):Float((min:Some(0),max:None,value:4)),((14)):Progress(0.61),((10)):Bool(true),((9)):Progress(0.95),((7)):Bool(true)}),matrices:({((13)):Simple(offset:(0,0,-2),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((14)):Simple(offset:(0,0,2),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((24)):Simple(offset:(15,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((18)):Parametrized(offset:(x:Yes(Some(((15)))),y:No(0),z:No(0)),rotate:(x:No(4.71238898038469),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),((15)):Parametrized(offset:(x:Yes(Some(((9)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((21)):Parametrized(offset:(x:Yes(Some(((16)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(4.6774823953448035),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),((25)):Simple(offset:(-15,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))})),animations:(ids:(available:[],max:0),storage:{},storage_order:[]),use_time:false,skybox:None)