(desc:(eng:"",rus:""),cam:(look_at:(0,0,0),alpha:3.988752060978289,beta:1.2641708739572288,r:3.500000000000127,offset_after_material:0.000025),uniforms:(ids:(available:[],max:11),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Progress(0),"portal_black_color_progress"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(9):Named(Float((min:Some(-3.14),max:Some(3.14),value:1.5)),"u"),(10):Named(Float((min:Some(0),max:Some(3.14),value:1.05)),"v")},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10)]),matrices:(ids:(available:[],max:19),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(2,0.57,0),scale:0.4,rotate:(0,3.141592653589793,0),mirror:(false,false,false)),"plane"),(14):Named(Simple(offset:(-2,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"sphere"),(15):Named(Simple(offset:(-2,0,0),scale:0.54,rotate:(1.1693705988362009,0.767944870877505,0),mirror:(false,false,false)),"sphere2"),(16):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(17):Named(Mul(to:Some(((18))),what:Some(((13)))),"plane_frame"),(18):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,1.5707963267948966,0),mirror:(false,false,false)))},storage_order:[(0),(13),(17),(14),(15)]),objects:(ids:(available:[],max:9),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);"))),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);"))),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);"))),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);"))),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);"))),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);"))),"room_z-"),(6):Named(Flat(kind:Simple(Some(((17)))),is_inside:(("float dist = square_distance(x/PI, (y+PI/2.)/PI*2.);\nif (dist > 1. && dist < 1.1) {\n  return solid_black_M;\n} else {\n  return NOT_INSIDE;\n}"))),"frame"),(7):Named(Complex(kind:Simple(Some(((16)))),intersect:(("return scene_intersection_none;\n\nfloat u = u_u;\nfloat v = v_u;\n\nfloat radius = 0.06;\nfloat offset = 0.01;\n\nvec3 pos = vec3(cos(u) * sin(v), cos(v), sin(u) * sin(v));\nvec3 du = normalize(vec3(cos(u + offset) * sin(v), cos(v), sin(u + offset) * sin(v)) - pos);\nvec3 dv = normalize(vec3(cos(u) * sin(v + offset), cos(v + offset), sin(u) * sin(v + offset)) - pos);\nvec3 dr = normalize(-pos);\n\nvec3 po = (plane_frame_mat * vec4(0., 0., 0., 1.)).xyz;\nvec3 ppos = (plane_frame_mat * vec4(u, -v, 0, 1.)).xyz;\n\nSurfaceIntersection hit = intersection_none;\nSceneIntersection i = SceneIntersection(0, hit);\n\nhit = cap(r, pos, pos + dr, radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_yellow_M; }\nhit = cap(r, pos, pos + du, radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_red_M; }\nhit = cap(r, pos, pos + dv, radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_blue_M; }\nhit = cap(r, po, ppos, radius); if (nearer(i, hit)) { i.hit = hit; i.material = room_green_M; }\n\nreturn i;"))),"debug"),(8):Named(Complex(kind:Simple(Some(((15)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n));"))),"sphere2")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8)]),cameras:(ids:(available:[],max:2),storage:{(0):Named((look_at:MatrixCenter(Some(((13)))),alpha:5.231252328007092,beta:1.134676454859327,r:3.1818181818182962),"plane"),(1):Named((look_at:MatrixCenter(Some(((14)))),alpha:5.231252328007092,beta:1.134676454859327,r:3.1818181818182962),"sphere")},storage_order:[(0),(1)]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:21),storage:{(0):Named(Simple(color:(0.7647179,0.7024815,0.061205085),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_yellow"),(1):Named(Simple(color:(0.029196177,0.029196177,0.029196177),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_black"),(2):Named(Simple(color:(0.8458183,0.07454156,0.07454156),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_red"),(3):Named(Simple(color:(0.18068509,0.18068509,0.18068509),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_gray"),(4):Named(Simple(color:(0.116810285,0.26798066,0.9083436),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_blue"),(5):Named(Simple(color:(0.15478948,0.73873776,0.2186588),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.15478948,0.73873776,0.2186588), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(1.16810285e-1, 2.6798066e-1, 9.083436e-1), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14)]),intersection_materials:(ids:(available:[],max:2),storage:{(0):Named(((("r = transform(sphere_mat_inv, r);\n\nvec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\n\nvec4 pos = r.o + r.d * t;\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nfloat offset = 0.01;\n\nvec3 du = normalize(vec3(cos(u + offset) * sin(v), cos(v), sin(u + offset) * sin(v)) - pos.xyz);\nvec3 dv = normalize(vec3(cos(u) * sin(v + offset), cos(v + offset), sin(u) * sin(v + offset)) - pos.xyz);\nvec3 dr = normalize(-pos.xyz);\nmat3 sphere_mat_custom = mat3(dr, dv, du);\n\nr.o = plane_frame_mat * vec4(u, -v, 0, 1.);\nr.d = normalize(plane_mat * vec4(inverse(sphere_mat_custom) * r.d.xyz, 0.));\n\nr.o += r.d * _offset_after_material;\n\nSurfaceIntersection hit = SurfaceIntersection(true, t, u, v, vec3(plane_mat * vec4(1., 0., 0., 0.)));\nreturn SceneIntersectionWithMaterial(\n    SceneIntersection(CUSTOM_MATERIAL, hit),\n    material_next(vec3(1.), r)\n);"))),"sphere_to_plane_portal"),(1):Named(((("vec3 normal = -get_normal(plane_frame_mat);\nSurfaceIntersection hit = plane_intersect(r, plane_frame_mat_inv, normal);\nif (!hit.hit) return SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\n\nvec4 pos_local = plane_frame_mat_inv * (r.o + r.d * hit.t);\n\nfloat u = pos_local.x;\nfloat v = -pos_local.y;\nbool is_inside = abs(u) < PI && v > 0. && v < PI;\n\nif (!is_inside) return SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\n\nvec3 pos = vec3(cos(u) * sin(v), cos(v), sin(u) * sin(v));\n\nfloat offset = 0.01;\n\nvec3 du = normalize(vec3(cos(u + offset) * sin(v), cos(v), sin(u + offset) * sin(v)) - pos.xyz);\nvec3 dv = normalize(vec3(cos(u) * sin(v + offset), cos(v + offset), sin(u) * sin(v + offset)) - pos.xyz);\nvec3 dr = normalize(-pos.xyz);\nmat3 sphere_mat_custom = mat3(dr, dv, du);\n\nr.o = vec4(pos, 1.);\nr.d = vec4(sphere_mat_custom * (plane_mat_inv * r.d).xyz, 0.);\n\nr.o += r.d * _offset_after_material;\n\nr = transform(sphere_mat, r);\n\nSurfaceIntersection hit_res = SurfaceIntersection(true, hit.t, u, v, sphere_mat_custom * vec3(1., 0., 0.));\nreturn SceneIntersectionWithMaterial(\n    SceneIntersection(CUSTOM_MATERIAL, hit_res),\n    material_next(vec3(1.), r)\n);"))),"plane_to_sphere_portal")},storage_order:[(0),(1)]),library:(ids:(available:[],max:5),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)));\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}")),"portal"),(4):Named((("mat3 transpose(mat3 matrix) {\n    vec3 row0 = matrix[0];\n    vec3 row1 = matrix[1];\n    vec3 row2 = matrix[2];\n    mat3 result = mat3(\n        vec3(row0.x, row1.x, row2.x),\n        vec3(row0.y, row1.y, row2.y),\n        vec3(row0.z, row1.z, row2.z)\n    );\n    return result;\n}\n\nfloat det(mat2 matrix) {\n    return matrix[0].x * matrix[1].y - matrix[0].y * matrix[1].x;\n}\n\nmat3 inverse(mat3 matrix) {\n    vec3 row0 = matrix[0];\n    vec3 row1 = matrix[1];\n    vec3 row2 = matrix[2];\n\n    vec3 minors0 = vec3(\n        det(mat2(row1.y, row1.z, row2.y, row2.z)),\n        det(mat2(row1.z, row1.x, row2.z, row2.x)),\n        det(mat2(row1.x, row1.y, row2.x, row2.y))\n    );\n    vec3 minors1 = vec3(\n        det(mat2(row2.y, row2.z, row0.y, row0.z)),\n        det(mat2(row2.z, row2.x, row0.z, row0.x)),\n        det(mat2(row2.x, row2.y, row0.x, row0.y))\n    );\n    vec3 minors2 = vec3(\n        det(mat2(row0.y, row0.z, row1.y, row1.z)),\n        det(mat2(row0.z, row0.x, row1.z, row1.x)),\n        det(mat2(row0.x, row0.y, row1.x, row1.y))\n    );\n\n    mat3 adj = transpose(mat3(minors0, minors1, minors2));\n\n    return (1.0 / dot(row0, minors0)) * adj;\n}")),"inverse")},storage_order:[(2),(0),(1),(3),(4)]),animations_filters:(uniforms:({((2)):false,((6)):false,((9)):false,((0)):false,((7)):false,((10)):false,((1)):false,((8)):false}),matrices:({((14)):true,((13)):true,((15)):true,((0)):false,((17)):false}),cameras:({((1)):true,((0)):true})),elements_descriptions:(uniforms:({}),matrices:({((13)):(help_description:None,overrided_name:"plane"),((14)):(help_description:None,overrided_name:"sphere"),((15)):(help_description:None,overrided_name:"gray sphere")}),cameras:({((0)):(help_description:None,overrided_name:"plane"),((1)):(help_description:None,overrided_name:"sphere")})),user_uniforms:(uniforms:({((9)):false,((10)):false,((7)):false,((2)):false,((0)):false,((6)):false,((1)):false,((8)):false}),matrices:({((14)):false,((15)):false,((0)):false,((17)):false,((13)):false})),animation_stages:(ids:(available:[],max:1),storage:{(0):Named((name:(eng:"view",rus:"view"),description:None,uniforms:({((9)):FromDev,((6)):FromDev,((1)):FromDev,((7)):FromDev,((0)):FromDev,((2)):FromDev,((10)):FromDev,((8)):FromDev}),matrices:({((0)):FromDev,((13)):ProvidedToUser,((14)):ProvidedToUser,((17)):FromDev,((15)):ProvidedToUser}),original_cam_button:true,set_cam:None,cams:{((0)):true,((1)):true}),"view")},storage_order:[(0)]),current_stage:Some(((0))),dev_stage:(uniforms:({((6)):Progress(0),((1)):Float((min:Some(0),max:None,value:4)),((9)):Float((min:Some(-3.14),max:Some(3.14),value:1.5)),((7)):Bool(true),((10)):Float((min:Some(0),max:Some(3.14),value:1.05)),((8)):Bool(false),((2)):Float((min:Some(0),max:None,value:4)),((0)):Float((min:Some(0),max:None,value:4))}),matrices:({((17)):Mul(to:Some(((18))),what:Some(((13)))),((13)):Simple(offset:(2,-0.57,0),scale:0.4,rotate:(0,3.141592653589793,3.141592653589793),mirror:(false,false,false)),((15)):Simple(offset:(-2,0,0),scale:0.54,rotate:(1.1693705988362009,0.767944870877505,0),mirror:(false,false,false)),((14)):Simple(offset:(-2,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))})),use_time:false)