(desc:(eng:"To understand how continuous processes works, it is useful to represent them as discrete. In these scene this approach used to show how teleportation works.\n\nWe can define teleportation like that: anything that fully goes into portal is teleported to another side.\n\nThen, to understand what happens with half-going object, we can split this process to the discrete steps.\n\nWe have step Δt. By time of this step part of the object is going into portal, and other part dont. Then we must:\n- Determine where to cut object that way that part of the object will fully go through portal, and other part dont.\n- Cut object in that place.\n- Teleport part which fully goes through portal.\n- Move to the end of the step.\n- Repeat iteratively.",rus:"Чтобы понимать как работают непрерывные процессы, бывает удобно представить их в виде дискретных. В данной сцене показывается это для телепортации.\n\nМожно определить телепортацию так: всё что полностью вошло в портал, отправляется на другую сторону портала.\n\nТогда чтобы понять что происходит с объектом, частично вошедшим в портал, необходимо разбить этот процесс на дискретные шаги.\n\nЗдесь имеется шаг Δt, за время этого шага часть объекта входит в портал, а часть не входит. Тогда последовательность действий следующая:\n- Сначала надо опеделить где нужно разрезать объект так чтобы одна часть полностью вошла в портал, а другая нет.\n- Затем обрезать его\n- Затем телепортировать обрезанную часть.\n- И далее можно двигать всё до конца шага.\n- Повторять итеративно."),cam:(look_at:(0,0,0),alpha:1.2838561583894414,beta:1.02149951726199,r:3.1818181818182043,offset_after_material:0.000025),uniforms:(ids:(available:[],max:20),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Progress(0),"portal_black_color_progress"),(7):Named(Bool(false),"teleport_light"),(8):Named(Progress(0),"dt"),(9):Named(Bool(false),"teleport_part"),(10):Named(Float((min:None,max:None,value:0.75)),"speed"),(11):Inline(Formula(("1.5-speed * dt"))),(12):Named(Bool(false),"show_cut"),(13):Inline(Bool(false)),(14):Inline(Bool(false)),(15):Inline(Bool(false)),(16):Inline(Bool(true)),(17):Inline(Bool(true)),(18):Inline(Bool(true)),(19):Named(Bool(false),"mirror")},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(12),(19)]),matrices:(ids:(available:[(13),(14),(17)],max:21),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(15):Inline(If(condition:Yes(Some(((9)))),then:Some(((16))),otherwise:Some(((18))))),(16):Inline(Teleport(first_portal:Some(((19))),second_portal:Some(((20))),what:Some(((18))))),(18):Named(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((11))))),rotate:(x:No(1.5707963267948966),y:No(0),z:No(3.141592653589793)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),"tr"),(19):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"a"),(20):Named(Simple(offset:(0,-2.5,0),scale:1,rotate:(0,3.141592653589793,0),mirror:(false,false,false)),"b")},storage_order:[(0),(19),(20),(18)]),objects:(ids:(available:[],max:9),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);"))),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);"))),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);"))),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);"))),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);"))),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);"))),"room_z-"),(6):Named(Flat(kind:Portal(Some(((19))),Some(((20)))),is_inside:(("return is_inside_portal(\n  circle_distance(x, y), \n  1.0, \n  0.07,\n  0.01,\n  portal_orange_M, \n  portal_blue_M, \n  grid_gray_M, \n  grid_gray_M, \n  back,\n  first\n);"))),"portal"),(7):Named(Flat(kind:Simple(Some(((15)))),is_inside:(("if (teleport_part_u == 1) {\n  pos = b_to_a_mat_teleport * pos;\n}\n\npos.z -= speed_u * (1. - dt_u);\n\nfloat value = (a_mat_inv * pos).z;\nif (value > 0.) return NOT_INSIDE;\n\nint result = is_inside_triangle(x, y, 2.0, 2.0, 0.04, triangle_white_M, triangle_black_M);\n\nif (show_cut_u == 1) {\n  if (value > -0.01) return NOT_INSIDE;\n  if (value > -0.01 - 0.04 && result != NOT_INSIDE) return triangle_black_M;\n}\n\nreturn result;"))),"triangle_part"),(8):Named(Flat(kind:Simple(Some(((18)))),is_inside:(("pos.z -= speed_u * (1. - dt_u);\nfloat value = (a_mat_inv * pos).z;\nif (value < 0.) return NOT_INSIDE;\n\nint result = is_inside_triangle(x, y, 2.0, 2.0, 0.04, triangle_white_M, triangle_black_M);\n\nif (show_cut_u == 1) {\n  if (value < 0.04 && result != NOT_INSIDE) return triangle_black_M;\n}\n\nreturn result;"))),"triangle")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8)]),cameras:(ids:(available:[],max:0),storage:{},storage_order:[]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:21),storage:{(0):Named(Simple(color:(0.7647179,0.7024815,0.061205085),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_yellow"),(1):Named(Simple(color:(0.029196177,0.029196177,0.029196177),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_black"),(2):Named(Simple(color:(0.8458183,0.07454156,0.07454156),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_red"),(3):Named(Simple(color:(0.18068509,0.18068509,0.18068509),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_gray"),(4):Named(Simple(color:(0.116810285,0.26798066,0.9083436),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_blue"),(5):Named(Simple(color:(0.15478948,0.73873776,0.2186588),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.15478948,0.73873776,0.2186588), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(1.16810285e-1, 2.6798066e-1, 9.083436e-1), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14)]),library:(ids:(available:[],max:4),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box"),(2):Named((("int is_inside_triangle(float x, float y, float angle, float width, float border, int inner_m, int border_m) {\n  float value = width * 0.7 - abs(x)*angle;\n  if (between(border, y, value - border * angle)) {\n    return inner_m;\n  } else if (between(0., y, value)) {\n    return border_m;\n  } else {\n    return NOT_INSIDE;\n  }\n}")),"triangle"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}\n")),"portal")},storage_order:[(0),(1),(2),(3)]),animations_filters:(uniforms:({((8)):true,((1)):false,((2)):false,((6)):false,((0)):false,((10)):false,((7)):false,((9)):true,((12)):true}),matrices:({((18)):false,((20)):false,((19)):false,((0)):false}),cameras:({})),elements_descriptions:(uniforms:({((9)):(help_description:None,overrided_name:""),((8)):(help_description:None,overrided_name:"Δt"),((12)):(help_description:None,overrided_name:"")}),matrices:({}),cameras:({})),user_uniforms:(uniforms:({((1)):false,((7)):false,((12)):false,((2)):false,((0)):false,((8)):false,((6)):false,((10)):false,((9)):false}),matrices:({((18)):false,((20)):false,((0)):false,((19)):false})),animation_stages:(ids:(available:[],max:3),storage:{(0):Named((name:(eng:"Determine where to cut",rus:"Определить где надо обрезать"),description:None,uniforms:({((0)):FromDev,((7)):FromDev,((12)):Changed(Some(((14)))),((10)):FromDev,((9)):Changed(Some(((13)))),((1)):FromDev,((2)):FromDev,((6)):FromDev,((8)):ProvidedToUser}),matrices:({((0)):FromDev,((20)):FromDev,((18)):FromDev,((19)):FromDev}),original_cam_button:false,set_cam:None,cams:{}),"determine where to cut"),(1):Named((name:(eng:"Cut",rus:"Обрезать"),description:None,uniforms:({((2)):FromDev,((8)):ProvidedToUser,((0)):FromDev,((12)):Changed(Some(((16)))),((10)):FromDev,((9)):Changed(Some(((15)))),((6)):FromDev,((7)):FromDev,((1)):FromDev}),matrices:({((0)):FromDev,((18)):FromDev,((19)):FromDev,((20)):FromDev}),original_cam_button:false,set_cam:None,cams:{}),"cut"),(2):Named((name:(eng:"Teleport part",rus:"Телепортировать часть"),description:None,uniforms:({((9)):Changed(Some(((17)))),((6)):FromDev,((10)):FromDev,((8)):ProvidedToUser,((7)):FromDev,((0)):FromDev,((1)):FromDev,((12)):Changed(Some(((18)))),((2)):FromDev}),matrices:({((20)):FromDev,((19)):FromDev,((0)):FromDev,((18)):FromDev}),original_cam_button:false,set_cam:None,cams:{}),"teleport")},storage_order:[(0),(1),(2)]),current_stage:Some(((0))),dev_stage:(uniforms:({((7)):Bool(false),((8)):Progress(0),((0)):Float((min:Some(0),max:None,value:4)),((2)):Float((min:Some(0),max:None,value:4)),((9)):Bool(false),((19)):Bool(false),((12)):Bool(false),((10)):Float((min:None,max:None,value:0.75)),((1)):Float((min:Some(0),max:None,value:4)),((6)):Progress(0)}),matrices:({((20)):Simple(offset:(0,-2.5,0),scale:1,rotate:(0,3.141592653589793,0),mirror:(false,false,false)),((19)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((18)):Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((11))))),rotate:(x:No(1.5707963267948966),y:No(0),z:No(3.141592653589793)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1)),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))})),use_time:false)