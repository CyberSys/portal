(desc:(eng:"# Mobius Monoportal\n\nThis portal is Mobius band in every sense! It has one continuous surface that is closed and teleports to itself.\n\nThis portal is easily constructed by two simple Mobius portals.\n\nThis portal looks and constructed just like regular Monoportal.\n\n# Twitter\n\n<https://twitter.com/optozorax/status/1372767652683214850>",rus:"# Монопортал Мёбиуса\n\nЭтот портал — лента Мёбиуса во всех смыслах! У него есть всего-лишь одна портальная поверхность, которая замкнута на себе, и телепортирует на себя.\n\nЭтот портал легко собирается из обычного портала Мёбиуса из двух частей.\n\nЭтот портал выглядит и собирается прямо как обычный Монопортал.\n\n# Twitter\n\n<https://twitter.com/optozorax/status/1372767652683214850>"),cam:(look_at:(0,0,0),alpha:-27.444766886160973,beta:1.1472552882533924,r:3.8500000000000076,offset_after_material:0.005),uniforms:(ids:(available:[],max:43),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Bool(true),"portal_teleport_light"),(7):Named(Formula(("const_portal_border_size")),"portal_border_size"),(8):Named(Progress(0.5),"mobius_u_progress"),(9):Named(Float((min:None,max:None,value:-0.01)),"mobius_border_u_progress"),(10):Named(Progress(0),"portal_color_progress"),(11):Named(Angle(0),"mobius_rotate_local_oy"),(12):Named(Progress(0),"progress"),(13):Inline(Formula(("-2.4 * (1.0-progress)"))),(14):Inline(Formula(("2.4 * (1.0 - progress)"))),(15):Inline(Formula(("const_portal_border_size + progress"))),(16):Named(Float((min:None,max:None,value:0.2)),"const_portal_border_size"),(17):Inline(Progress(0)),(18):Inline(Progress(1)),(19):Inline(Formula(("progress * pi()"))),(20):Inline(Float((min:None,max:None,value:2))),(21):Inline(Progress(1)),(22):Inline(Formula(("-progress"))),(23):Inline(Formula(("progress"))),(24):Inline(Formula(("(1.0 - progress) + const_portal_border_size"))),(25):Inline(Progress(1)),(26):Inline(Progress(0)),(27):Inline(Formula(("1.0 - progress * 0.5"))),(28):Inline(Formula(("min(progress, 0.1) * 10"))),(29):Inline(Progress(1)),(30):Inline(Progress(1)),(31):Inline(Progress(0.5)),(32):Inline(Progress(1)),(33):Inline(Formula(("-1.0+progress"))),(34):Inline(Formula(("1.0-progress"))),(35):Inline(Formula(("progress * pi() / 2"))),(36):Inline(Formula(("pi() + progress * pi() / 2"))),(37):Inline(Formula(("1.0-progress"))),(38):Inline(Formula(("1.0-progress"))),(39):Inline(Progress(0.5)),(40):Inline(Progress(0.5)),(41):Inline(Float((min:None,max:None,value:-0.01))),(42):Inline(Progress(0))},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(11),(12),(16)]),matrices:(ids:(available:[],max:38),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"portal_0"),(14):Named(Mul(to:Some(((31))),what:Some(((13)))),"portal_a"),(15):Named(Mul(to:Some(((33))),what:Some(((13)))),"portal_b"),(16):Inline(Parametrized(offset:(x:Yes(Some(((13)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(17):Inline(Parametrized(offset:(x:Yes(Some(((14)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(18):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"portal_b_user"),(19):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,1.5707963267948966),mirror:(false,false,false))),(20):Inline(Mul(to:Some(((21))),what:Some(((18))))),(21):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((19)))),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(22):Inline(Parametrized(offset:(x:Yes(Some(((22)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(23):Inline(Parametrized(offset:(x:Yes(Some(((23)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(3.141592653589793),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(24):Inline(Simple(offset:(-1,0,0),scale:1,rotate:(0,0,1.5707963267948966),mirror:(false,false,false))),(25):Inline(Simple(offset:(1,0,0),scale:1,rotate:(0,3.141592653589793,1.5707963267948966),mirror:(false,false,false))),(26):Inline(Parametrized(offset:(x:Yes(Some(((33)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(27):Inline(Parametrized(offset:(x:Yes(Some(((34)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(3.141592653589793),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(28):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((35)))),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(29):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((36)))),z:No(1.5707963267948966)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(30):Inline(Mul(to:Some(((31))),what:Some(((13))))),(31):Inline(Mul(to:Some(((35))),what:Some(((34))))),(32):Inline(Mul(to:Some(((33))),what:Some(((13))))),(33):Inline(Mul(to:Some(((37))),what:Some(((36))))),(34):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((11)))),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(35):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,1.5707963267948966,1.5707963267948966),mirror:(false,false,false))),(36):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((11)))),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(37):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,4.71238898038469,1.5707963267948966),mirror:(false,false,false)))},storage_order:[(0),(13),(14),(15),(18)]),objects:(ids:(available:[],max:7),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);")),in_subspace:Normal),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);")),in_subspace:Normal),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);")),in_subspace:Normal),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);")),in_subspace:Normal),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_texture_M);")),in_subspace:Normal),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_texture_M);")),in_subspace:Normal),"room_z-"),(6):Named(Complex(kind:Portal(Some(((14))),Some(((15)))),intersect:(("float max_u = mobius_u_progress_u * 2.0*PI;\nfloat border_u = portal_border_size_u * 0.5 * mobius_border_u_progress_u;\n\nSurfaceIntersection hit =  mobius_intersect(r, max_u);\nint material = portal_blue_M;\nif (first) { material = portal_orange_M; }\nfloat y = abs(hit.v);\nfloat black = 0.2 / 2. * 0.3;\nif (y > 1. - black || (y < 1. - portal_border_size_u + black && y > 1. - portal_border_size_u)) {\n  material = solid_black_M;\n}\nif (abs(hit.v) < 1. - portal_border_size_u && hit.u < max_u - border_u && hit.u > border_u) {\n  if (portal_teleport_light_u == 1) {\n    material = TELEPORT;\n  } else {\n    material = gray_grid_M;\n  }\n}\nreturn SceneIntersection(material, hit, false);")),in_subspace:Normal),"mobius")},storage_order:[(0),(1),(2),(3),(4),(5),(6)]),cameras:(ids:(available:[],max:1),storage:{(0):Named((look_at:MatrixCenter(Some(((13)))),alpha:-11.654341623575677,beta:1.1164549938541288,r:4.658500000000007),"portal_0")},storage_order:[(0)]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/mobius_monoportal.png"),"monoportal")},storage_order:[(0)]),materials:(ids:(available:[],max:12),storage:{(0):Named(Simple(color:(0.7647179,0.7024815,0.061205085),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_yellow"),(1):Named(Simple(color:(0.029196177,0.029196177,0.029196177),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_black"),(2):Named(Simple(color:(0.8458183,0.07454156,0.07454156),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_red"),(3):Named(Simple(color:(0.18068509,0.18068509,0.18068509),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_gray"),(4):Named(Simple(color:(0.116810285,0.26798066,0.9083436),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_blue"),(5):Named(Simple(color:(0.15478948,0.73873776,0.2186588),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_green"),(6):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= portal_color_progress_u;\nreturn result;"))),"portal_blue"),(7):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= portal_color_progress_u;\nreturn result;"))),"portal_orange"),(8):Named(Simple(color:(0.4392156862745098,0.4392156862745098,0.4392156862745098),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"gray_grid"),(9):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.15478948,0.73873776,0.2186588), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(monoportal_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(10):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(1.16e-1, 2.67e-1, 9.08e-1), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(monoportal_tex, vec2(room_size_x_u - hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(11):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black")},storage_order:[(0),(2),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11)]),intersection_materials:(ids:(available:[],max:0),storage:{},storage_order:[]),library:(ids:(available:[],max:2),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("vec2 two_lines_nearest_points(Ray a, Ray b) {\r\n    vec3 n = cross(a.d.xyz, b.d.xyz);\r\n    vec3 n1 = cross(a.d.xyz, n);\r\n    vec3 n2 = cross(b.d.xyz, n);\r\n    return vec2(\r\n        dot(b.o.xyz-a.o.xyz, n2)/dot(a.d.xyz, n2),\r\n        dot(a.o.xyz-b.o.xyz, n1)/dot(b.d.xyz, n1)\r\n    );\r\n}\r\n\r\nfloat project(vec3 a, vec3 to) {\r\n    return dot(a, to) / dot(to, to);\r\n}\r\n\r\nvec3 projection(vec3 a, vec3 to) {\r\n    return to * project(a, to);\r\n}\r\n\r\nfloat clamp_mod(float a, float max) {\r\n    a = max + mod(a, max);\r\n    if (a < 0.) {\r\n        a += max;\r\n    }\r\n    if (a > max) {\r\n        a -= max;\r\n    }\r\n    return a;\r\n}\r\n\r\nfloat clamp_angle(float a, float max) {\r\n    return clamp_mod(a, max);\r\n}\r\n\r\nvec3 mobius_o(float u) {\r\n    return vec3(cos(u), 0, sin(u));\r\n}\r\n\r\nvec3 mobius_d(float u) {\r\n    return vec3(cos(u/2.)*cos(u), sin(u/2.), cos(u/2.)*sin(u))/2.; // mobius\r\n}\r\n\r\nvec3 mobius_step(float u, Ray r) {\r\n    Ray l = Ray(vec4(mobius_o(u), 1.), vec4(mobius_d(u), 0.), 1.0, false);\r\n    vec2 ts = two_lines_nearest_points(l, r);\r\n\r\n    vec3 lnearest = (l.o + l.d * ts.x).xyz;\r\n    vec3 rnearest = (r.o + r.d * ts.y).xyz;\r\n    \r\n    float distance = length(lnearest - rnearest);\r\n\r\n    if (abs(ts.x) > 1.) {\r\n        distance *= 2.0 * abs(ts.x);\r\n    }\r\n\r\n    if (ts.y < 0.) {\r\n        distance *= 4.0 * abs(ts.y);\r\n    }\r\n\r\n    return vec3(distance, ts.x, ts.y); // distance, v, t\r\n}\r\n\r\nvec3 mobius_d1(float v, float u) {\r\n    float a = sin(u/2.);\r\n    float b = cos(u/2.);\r\n    float c = sin(u);\r\n    float d = cos(u);\r\n    return vec3(\r\n        b*d/2., \r\n        b*c/2., \r\n        a/2.\r\n    );\r\n}\r\n\r\nvec3 mobius_d2(float v, float u) {\r\n    float a = sin(u/2.);\r\n    float b = cos(u/2.);\r\n    float c = sin(u);\r\n    float d = cos(u);\r\n    return vec3(\r\n        -(0.25*v*a*d+0.5*v*c*b+c), \r\n        -(0.25*(v*a*c-2.*d*(v*b+2.))), \r\n        0.25*v*b\r\n    );\r\n}\r\n\r\nstruct SearchResult {\r\n    float t;\r\n    float u;\r\n    float v;\r\n};\r\n\r\nSearchResult mobius_best_approx(float u, Ray r, float max, SearchResult best) {\r\n    float eps_der = 0.0001;\r\n    float eps_newton = 0.0001;\r\n\r\n    vec3 step = mobius_step(u, r);\r\n    int count = 10; \r\n    for (int k = 0; k < 10; k++) { if (k >= count) break; // !FOR_NUMBER!\r\n    for (int k = 0; k < count; k++) { // !FOR_VARIABLE!\r\n        if (step.x < eps_newton) {\r\n            break;\r\n        }\r\n        float du = -step.x/(mobius_step(u + eps_der, r).x - step.x)*eps_der;\r\n        u = clamp_angle(u + du, max);\r\n        step = mobius_step(u, r);\r\n        if (best.t > 0. && abs(u-best.u) < 0.01) {\r\n            return SearchResult(-1., 0., 0.);\r\n        }\r\n    }\r\n\r\n    if (step.x < eps_newton) {\r\n        return SearchResult(step.z, u, step.y);    \r\n    } else {\r\n        return SearchResult(-1., 0., 0.);\r\n    }\r\n}\r\n\r\nSearchResult update_best_approx(SearchResult best, SearchResult current) {\r\n    if (current.t > 0. && (current.v > -1. && current.v < 1.)) {\r\n        if (best.t < 0.) {\r\n            best = current;\r\n        } else {\r\n            if (current.t < best.t) {\r\n                best = current;\r\n            }\r\n        }\r\n    }\r\n    return best;\r\n}\r\n\r\nSearchResult mobius_find_best(Ray r, float max) {\r\n    SearchResult best = SearchResult(-1., 0., 0.);\r\n    best = update_best_approx(best, mobius_best_approx(0., r, max, best));\r\n    best = update_best_approx(best, mobius_best_approx(PI, r, max, best));\r\n    int count1 = 2;\r\n    for (int i = 0; i < 2; i++) { if (i >= count1) break; // !FOR_NUMBER!\r\n    for (int i = 0; i < count1; i++) { // !FOR_VARIABLE!\r\n        float u = float(i*2 + 1)/4. * 2. * PI;\r\n        best = update_best_approx(best, mobius_best_approx(u, r, max, best));\r\n    }\r\n    int count2 = 4;\r\n    for (int i = 0; i < 4; i++) { if (i >= count2) break; // !FOR_NUMBER!\r\n    for (int i = 0; i < count2; i++) { // !FOR_VARIABLE!\r\n        float u = float(i*2 + 1)/8. * 2. * PI;\r\n        best = update_best_approx(best, mobius_best_approx(u, r, max, best));\r\n    }\r\n    if (best.t < 0.) {\r\n        return best;\r\n    }\r\n    best = update_best_approx(best, mobius_best_approx(float(8 - 1)/16. * 2. * PI, r, max, best));\r\n    best = update_best_approx(best, mobius_best_approx(float(8 + 1)/16. * 2. * PI, r, max, best));\r\n    return best;\r\n}\r\n\r\nbool intersect_mobius_sphere(Ray r) {\r\n    vec3 op = -r.o.xyz;\r\n    float b = dot(op, r.d.xyz);\r\n    float det = b * b - dot(op, op) + 2.4055; // 1.55²\r\n    return det >= 0.;\r\n}\r\n\r\nSurfaceIntersection mobius_intersect(Ray r, float max) {\r\n    if (intersect_mobius_sphere(r)) {\r\n        SearchResult best = mobius_find_best(r, max);\r\n        if (best.t >= 0.) {\r\n            vec3 normal = normalize_normal(cross(mobius_d1(best.v, best.u), mobius_d2(best.v, best.u)), r.d.xyz);\r\n            return SurfaceIntersection(true, best.t, best.u, best.v, normal);\r\n        }\r\n    }\r\n\r\n    return intersection_none;\r\n}")),"mobius")},storage_order:[(0),(1)]),animations_filters:(uniforms:({((16)):false,((8)):true,((43)):false,((2)):false,((7)):true,((12)):true,((6)):true,((10)):true,((1)):false,((0)):false,((9)):true,((11)):true}),matrices:({((14)):true,((0)):false,((18)):true,((15)):true,((13)):true}),cameras:({((0)):true})),elements_descriptions:(uniforms:({((11)):(help_description:None,overrided_name:"Local angle around OY"),((8)):(help_description:None,overrided_name:""),((9)):(help_description:None,overrided_name:""),((7)):(help_description:None,overrided_name:""),((10)):(help_description:None,overrided_name:""),((6)):(help_description:None,overrided_name:"Teleport light"),((12)):(help_description:None,overrided_name:"Progress")}),matrices:({((14)):(help_description:None,overrided_name:""),((13)):(help_description:None,overrided_name:"Portal position"),((15)):(help_description:None,overrided_name:""),((18)):(help_description:Some((eng:"Try rotate this around and found another\nangle/mirror combination when blue portal\nis match orange portal, and not equal to the\nshowed rotation. You will found that there is\nno other option. Therefore this is the only \none Möbius monoportal.",rus:"Попробуй покрутить этот портал и найти\nдругую комбинацию угол/отражение, которая\nзаставит голубой портал совпасть с оранжевым. \nОчень скоро ты обнаружишь, что не существует \nварианта, отличного от показанного в этой \nанимации, поэтому данный монопортал \nМёбиуса является единственным возможным.")),overrided_name:"Blue portal position")}),cameras:({((0)):(help_description:None,overrided_name:"Look at monoportal")})),user_uniforms:(uniforms:({((9)):false,((16)):false,((1)):false,((12)):false,((2)):false,((11)):false,((7)):false,((10)):false,((0)):false,((6)):true,((8)):false,((43)):false}),matrices:({((14)):false,((13)):false,((0)):false,((18)):false,((15)):false})),animation_stages:(ids:(available:[],max:7),storage:{(0):Named((name:(eng:"Move portals towards each other",rus:"Двигаем порталы друг к другу"),description:None,uniforms:({((10)):Changed(Some(((18)))),((8)):FromDev,((0)):FromDev,((6)):FromDev,((9)):Changed(Some(((17)))),((16)):FromDev,((2)):FromDev,((11)):FromDev,((1)):FromDev,((12)):ProvidedToUser,((7)):Changed(Some(((15))))}),matrices:({((14)):Changed(Some(((16)))),((0)):FromDev,((13)):FromDev,((18)):FromDev,((15)):Changed(Some(((17))))}),original_cam_button:false,set_cam:None,cams:{((0)):false}),"move to center"),(1):Named((name:(eng:"Notice that Möbius band is equal itself after rotating 180°",rus:"Можно заметитьо что лента Мёбиуса равна себе после вращения на 180°"),description:None,uniforms:({((43)):FromDev,((7)):Changed(Some(((20)))),((0)):FromDev,((11)):FromDev,((6)):FromDev,((2)):FromDev,((12)):ProvidedToUser,((10)):Changed(Some(((21)))),((8)):FromDev,((1)):FromDev,((9)):FromDev,((16)):FromDev}),matrices:({((13)):FromDev,((14)):Changed(Some(((19)))),((15)):Changed(Some(((20)))),((0)):FromDev,((18)):ProvidedToUser}),original_cam_button:false,set_cam:None,cams:{((0)):false}),"rotate"),(2):Named((name:(eng:"Offset portals",rus:"Смещаем порталы"),description:None,uniforms:({((11)):FromDev,((2)):FromDev,((9)):Changed(Some(((26)))),((16)):FromDev,((0)):FromDev,((12)):ProvidedToUser,((7)):Changed(Some(((24)))),((8)):FromDev,((6)):FromDev,((1)):FromDev,((10)):Changed(Some(((25))))}),matrices:({((15)):Changed(Some(((23)))),((0)):FromDev,((14)):Changed(Some(((22)))),((13)):FromDev,((18)):FromDev}),original_cam_button:false,set_cam:None,cams:{((0)):false}),"offset"),(3):Named((name:(eng:"Remove half of Möbius band",rus:"Убираем половину ленты Мёбиуса"),description:None,uniforms:({((0)):FromDev,((11)):FromDev,((9)):Changed(Some(((28)))),((2)):FromDev,((6)):FromDev,((12)):ProvidedToUser,((10)):Changed(Some(((29)))),((8)):Changed(Some(((27)))),((1)):FromDev,((16)):FromDev,((7)):FromDev}),matrices:({((13)):FromDev,((14)):Changed(Some(((24)))),((18)):FromDev,((15)):Changed(Some(((25)))),((0)):FromDev}),original_cam_button:false,set_cam:None,cams:{((0)):false}),"remove half"),(4):Named((name:(eng:"Connect them",rus:"Соединяем их"),description:None,uniforms:({((16)):FromDev,((0)):FromDev,((10)):Changed(Some(((32)))),((6)):FromDev,((8)):Changed(Some(((31)))),((12)):ProvidedToUser,((7)):FromDev,((2)):FromDev,((11)):FromDev,((1)):FromDev,((9)):Changed(Some(((30))))}),matrices:({((0)):FromDev,((15)):Changed(Some(((27)))),((13)):FromDev,((14)):Changed(Some(((26)))),((18)):FromDev}),original_cam_button:false,set_cam:None,cams:{((0)):false}),"connect"),(5):Named((name:(eng:"Remove borders",rus:"Удаляем границы"),description:None,uniforms:({((8)):Changed(Some(((39)))),((12)):ProvidedToUser,((7)):FromDev,((0)):FromDev,((1)):FromDev,((2)):FromDev,((6)):FromDev,((11)):FromDev,((16)):FromDev,((10)):Changed(Some(((37)))),((9)):Changed(Some(((38))))}),matrices:({((0)):FromDev,((15)):Changed(Some(((29)))),((18)):FromDev,((14)):Changed(Some(((28)))),((13)):FromDev}),original_cam_button:false,set_cam:None,cams:{((0)):false}),"remove borders"),(6):Named((name:(eng:"Explore",rus:"Исследуй"),description:Some((eng:"You can notice that if you rotate this monoportal around his OY axis, then image is not changed. This is happens because one part of portal compensate itself on the this OY axis.",rus:"Ты можешь заметить что при вращении монопортала по оси OY, изображение в портале не меняется. Это происходит потому что одна часть портала компенсирует другую, но только по этой оси OY.")),uniforms:({((1)):FromDev,((8)):Changed(Some(((40)))),((7)):FromDev,((16)):FromDev,((9)):Changed(Some(((41)))),((2)):FromDev,((11)):ProvidedToUser,((0)):FromDev,((12)):FromDev,((10)):Changed(Some(((42)))),((6)):FromDev}),matrices:({((15)):Changed(Some(((32)))),((18)):FromDev,((13)):ProvidedToUser,((0)):FromDev,((14)):Changed(Some(((30))))}),original_cam_button:true,set_cam:None,cams:{((0)):true}),"explore")},storage_order:[(0),(1),(2),(3),(4),(5),(6)]),current_stage:Some(((6))),dev_stage:(uniforms:({((6)):Bool(true),((16)):Float((min:None,max:None,value:0.2)),((11)):Angle(0),((43)):Progress(0.33),((9)):Progress(1),((0)):Float((min:Some(0),max:None,value:4)),((10)):Progress(0),((1)):Float((min:Some(0),max:None,value:4)),((2)):Float((min:Some(0),max:None,value:4)),((7)):Formula(("const_portal_border_size")),((12)):Progress(0),((8)):Progress(1)}),matrices:({((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((15)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((13)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((14)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))})),use_time:false)