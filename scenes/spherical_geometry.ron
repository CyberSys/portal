(desc:(eng:"",rus:""),cam:(look_at:(0,0,0),alpha:1.6095732413694874,beta:1.5590195655822827,r:1.8613644470368391,offset_after_material:0.000025),uniforms:(ids:(available:[],max:14),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Progress(0),"portal_black_color_progress"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(9):Named(Float((min:Some(0),max:Some(0.3),value:0.15000000000000002)),"height"),(10):Named(Float((min:Some(0),max:Some(0.02),value:0.0035)),"width"),(11):Named(Float((min:Some(0),max:Some(0.02),value:0.0103)),"side"),(12):Named(Int((min:None,max:None,value:25)),"plus_degree"),(13):Named(Int((min:None,max:None,value:25)),"minus_degree")},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(11),(12),(13)]),matrices:(ids:(available:[],max:21),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(0,0,0),scale:1,rotate:(1.5707963267948966,0,0),mirror:(false,false,false)),"a"),(14):Named(Mul(to:Some(((18))),what:Some(((17)))),"b"),(15):Inline(Simple(offset:(0,0,0),scale:0.99,rotate:(0,0,0),mirror:(false,false,false))),(16):Named(Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((14)))),"b1"),(17):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,1.5707963267948966,1.5707963267948966),mirror:(false,false,false))),(18):Inline(Simple(offset:(0,0,0),scale:1,rotate:(6.09119908946021,0,0),mirror:(true,false,false))),(19):Named(Teleport(first_portal:Some(((14))),second_portal:Some(((13))),what:Some(((14)))),"a1"),(20):Named(Teleport(first_portal:Some(((14))),second_portal:Some(((13))),what:Some(((19)))),"a2")},storage_order:[(0),(13),(14),(16),(19),(20)]),objects:(ids:(available:[],max:7),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);"))),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);"))),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);"))),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);"))),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);"))),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);"))),"room_z-"),(6):Named(Complex(kind:Simple(Some(((15)))),intersect:(("vec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n));"))),"sphere")},storage_order:[(0),(1),(2),(3),(4),(5),(6)]),cameras:(ids:(available:[],max:0),storage:{},storage_order:[]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:21),storage:{(0):Named(Simple(color:(0.7647179,0.7024815,0.061205085),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_yellow"),(1):Named(Simple(color:(0.029196177,0.029196177,0.029196177),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_black"),(2):Named(Simple(color:(0.8458183,0.07454156,0.07454156),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_red"),(3):Named(Simple(color:(0.18068509,0.18068509,0.18068509),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_gray"),(4):Named(Simple(color:(0.116810285,0.26798066,0.9083436),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_blue"),(5):Named(Simple(color:(0.15478948,0.73873776,0.2186588),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:50,grid_coef:0.3),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.15478948,0.73873776,0.2186588), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(1.16810285e-1, 2.6798066e-1, 9.083436e-1), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14)]),intersection_materials:(ids:(available:[],max:1),storage:{(0):Named(((("SceneIntersectionWithMaterial result = SceneIntersectionWithMaterial(scene_intersection_none, material_empty());\r\n\r\nRay r_b = r;\r\nRay r3;\r\nfloat len = 0.;\r\n\r\nfor (int i = 0; i < 1000; ++i) {if (i >= plus_degree_u) break;\r\n    r3 = transform(b_mat_inv, r_b);\r\n    len = length(r3.d);\r\n    r3.d = normalize(r3.d);\r\n\r\n    SceneIntersection shit = sphere_picture(r3, CUSTOM_MATERIAL, false);\r\n    SurfaceIntersection hit = shit.hit;\r\n    if (hit.hit) {\r\n        hit.t /= len;\r\n    }\r\n    if (nearer(result.scene.hit, hit)) {\r\n        result.scene = shit;\r\n        vec3 blue_color = vec3(3.529411764705882e-2, 6.431372549019608e-1, 7.88235294117647e-1);\r\n        vec3 green_color = vec3(1.5478948e-1, 7.3873776e-1, 2.186588e-1);\r\n        float t = min(float(i) / 10., 1.);\r\n        vec3 color = blue_color * (1. - t) + green_color * t;\r\n        result.material = material_final(color);\r\n    }\r\n\r\n    r_b = transform(a_mat, transform(b_mat_inv, r_b));\r\n}\r\n\r\nr_b = r;\r\nlen = 0.;\r\n\r\nfor (int i = 0; i < 1000; ++i) {if (i >= minus_degree_u) break;\r\n    r3 = transform(a_mat_inv, r_b);\r\n    len = length(r3.d);\r\n    r3.d = normalize(r3.d);\r\n\r\n    SceneIntersection shit = sphere_picture(r3, CUSTOM_MATERIAL, true);\r\n    SurfaceIntersection hit = shit.hit;\r\n    if (hit.hit) {\r\n        hit.t /= len;\r\n    }\r\n    if (nearer(result.scene.hit, hit)) {\r\n        result.scene = shit;\r\n        vec3 orange_color = vec3(9.294117647058824e-1, 4.235294117647059e-1, 5.0980392156862744e-2);\r\n        vec3 red_color = vec3(8.458183e-1, 7.454156e-2, 7.454156e-2);\r\n        float t = min(float(i) / 10., 1.);\r\n        vec3 color = orange_color * (1. - t) + red_color * t;\r\n        result.material = material_final(color);\r\n    }\r\n\r\n    r_b = transform(b_mat, transform(a_mat_inv, r_b));\r\n}\r\n\r\nreturn result;\r\n"))),"blue_portal")},storage_order:[(0)]),library:(ids:(available:[],max:5),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)));\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}")),"portal"),(4):Named((("SceneIntersection sphere_picture(Ray r, int material, bool first) {\nfloat sign = 1.;\nif (first) sign = -1.;\n\nvec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\n\nvec4 pos = r.o + r.d * t;\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nfloat x = v * sin(u);\nfloat y = v * cos(u);\n\nif (t < 0. || !(\n  (abs(x) < height_u && abs(y) < width_u) || \n  (abs(abs(x) - height_u) < width_u && abs(y + sign * side_u) < side_u + width_u)\n)) t = b + det;\n\npos = r.o + r.d * t;\nu = atan(pos.z, pos.x);\nv = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\nx = v * sin(u);\ny = v * cos(u);\n\nif (t < 0. || !(\n  (abs(x) < height_u && abs(y) < width_u) || \n  (abs(abs(x) - height_u) < width_u && abs(y + sign * side_u) < side_u + width_u)\n)) return scene_intersection_none;\n\nvec3 n = normalize(pos.xyz);\nreturn SceneIntersection(material, SurfaceIntersection(true, t, u, v, n));\n}")),"sphere_picture")},storage_order:[(2),(0),(1),(3),(4)]),animations_filters:(uniforms:({}),matrices:({}),cameras:({})),elements_descriptions:(uniforms:({}),matrices:({}),cameras:({})),user_uniforms:(uniforms:({}),matrices:({})),animation_stages:(ids:(available:[],max:0),storage:{},storage_order:[]),current_stage:None,dev_stage:(uniforms:({((0)):Float((min:Some(0),max:None,value:4)),((11)):Float((min:Some(0),max:Some(0.02),value:0.0103)),((2)):Float((min:Some(0),max:None,value:4)),((13)):Int((min:None,max:None,value:25)),((10)):Float((min:Some(0),max:Some(0.02),value:0.0035)),((9)):Float((min:Some(0),max:Some(0.3),value:0.15000000000000002)),((7)):Bool(true),((8)):Bool(false),((12)):Int((min:None,max:None,value:25)),((1)):Float((min:Some(0),max:None,value:4)),((6)):Progress(0)}),matrices:({((20)):Teleport(first_portal:Some(((14))),second_portal:Some(((13))),what:Some(((19)))),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((14)):Mul(to:Some(((18))),what:Some(((17)))),((13)):Simple(offset:(0,0,0),scale:1,rotate:(1.5707963267948966,0,0),mirror:(false,false,false)),((19)):Teleport(first_portal:Some(((14))),second_portal:Some(((13))),what:Some(((14)))),((16)):Teleport(first_portal:Some(((13))),second_portal:Some(((14))),what:Some(((14))))})),use_time:false)