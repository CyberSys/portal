(desc:(eng:"# Möbius portal\n\nIt\'s a portal of two parts in shape of the Möbius band. For them who don\'t know, Möbius band has only one surface: no front, no back. If you don\'t understand where is Möbius band here, try toggle option «Teleport light».\n\n# Origin\n\nI invented this portal by myself, but it was presented in program [Polycut](https://facstaff.susqu.edu/brakke/polycut/polycut.htm) a very long ago. According to this program, this scene is called «Mobius 2-cover».\n\nSomething similiar is created in [KnotPortal](https://imaginary.org/program/knotportal) program and [related paper](https://arxiv.org/abs/2001.02927). \n\n# Twitter\n\n<https://twitter.com/optozorax/status/1361438218101657600>",rus:"# Портал Мёбиуса\n\nЭто портал из двух частей в форме ленты Мёбиуса. Кто не знает, лента Мёбиуса особенна тем, что она обладает всего одной поверхностью, у неё нет ни передней, ни задней части. Если вы не понимаете где здесь находится лента мёбиуса, попробуйте выключить флаг «Teleport light».\n\n# Источник\n\nЯ изобрёл этот портал самостоятельно, но оказалось, что он уже был описан ранее, в программе [Polycut](https://facstaff.susqu.edu/brakke/polycut/polycut.htm) ещё очень давно. Согласно этой программе, это «Mobius 2-cover».\n\nНечто похожее делалось в программа [KnotPortal](https://imaginary.org/program/knotportal) и [научная работа](https://arxiv.org/abs/2001.02927) по ней.\n\n# Twitter\n\n<https://twitter.com/optozorax/status/1361438218101657600>"),cam:(look_at:(0,0,0),alpha:1.1836938459668507,beta:1.065771684646604,r:4.772240000000025,offset_after_material:0.005),uniforms:(ids:(available:[],max:23),storage:{(0):Named(Float((min:Some(0),max:None,value:6)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:6)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Bool(true),"teleport_light"),(7):Named(Progress(0.2),"border_size"),(8):Named(Formula(("0.000005")),"mobius_derivative_step"),(9):Inline(Formula(("-(room_size_x+4+1)"))),(10):Inline(Formula(("room_size_x+4+1"))),(11):Inline(Formula(("-(room_size_x+4+1)"))),(12):Inline(Formula(("-(room_size_x+4+1)"))),(13):Inline(Formula(("room_size_x+4+1"))),(14):Named(Progress(0.42),"black_border_size"),(15):Named(Float((min:Some(0),max:Some(5),value:0.45)),"object_move"),(16):Named(Bool(false),"enable_object"),(17):Inline(Bool(true)),(18):Inline(Bool(true)),(19):Inline(Bool(true)),(20):Inline(Bool(true)),(21):Inline(Bool(false)),(22):Inline(Bool(false))},storage_order:[(0),(1),(2),(6),(7),(8),(14),(15),(16)]),matrices:(ids:(available:[],max:35),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(1)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Simple(offset:(-2.4,0,0),scale:1,rotate:(0,0,1.5707963267948966),mirror:(false,false,false)),"mobius_a"),(14):Named(Simple(offset:(2.4,0,0),scale:1,rotate:(0,0,1.5707963267948966),mirror:(false,false,false)),"mobius_b"),(15):Inline(Parametrized(offset:(x:Yes(Some(((9)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(16):Inline(Parametrized(offset:(x:Yes(Some(((10)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(17):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(18):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(19):Inline(Simple(offset:(-2.4,0,0),scale:1,rotate:(0,0,1.5707963267948966),mirror:(false,false,false))),(20):Inline(Simple(offset:(2.4,0,0),scale:1,rotate:(0,0,1.5707963267948966),mirror:(false,false,false))),(21):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"mobius_a_mul"),(22):Named(Simple(offset:(-0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"mobius_b_mul"),(23):Named(Mul(to:Some(((31))),what:Some(((27)))),"object"),(24):Named(Teleport(first_portal:Some(((28))),second_portal:Some(((29))),what:Some(((23)))),"object_teleported"),(25):Inline(Parametrized(offset:(x:Yes(Some(((12)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(26):Inline(Parametrized(offset:(x:Yes(Some(((13)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(27):Named(Simple(offset:(0,1,0),scale:1,rotate:(0,2.7401669256310974,5.8643062867009474),mirror:(false,false,false)),"object_vector"),(28):Named(Mul(to:Some(((13))),what:Some(((21)))),"mobius_a_final"),(29):Named(Mul(to:Some(((14))),what:Some(((22)))),"mobius_b_final"),(30):Named(Teleport(first_portal:Some(((28))),second_portal:Some(((29))),what:Some(((27)))),"object_vector_teleported"),(31):Inline(Parametrized(offset:(x:Yes(Some(((15)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(32):Inline(Simple(offset:(0,1,0),scale:1,rotate:(0,3.141592653589793,0),mirror:(false,false,false))),(33):Inline(Simple(offset:(0,1,0),scale:1,rotate:(0,2.7227136331111543,5.8643062867009474),mirror:(false,false,false))),(34):Inline(Simple(offset:(-1.5,-1.5,1.5),scale:1,rotate:(5.340707511102648,3.141592653589793,0.890117918517108),mirror:(false,false,false)))},storage_order:[(0),(13),(14),(21),(22),(28),(29),(23),(24),(27),(30)]),objects:(ids:(available:[],max:12),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_white_M);")),in_subspace:Normal),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_white_M);")),in_subspace:Normal),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);")),in_subspace:Normal),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);")),in_subspace:Normal),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_gray_M);")),in_subspace:Normal),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_gray_M);")),in_subspace:Normal),"room_z-"),(6):Named(Complex(kind:Portal(Some(((28))),Some(((29)))),intersect:(("//return scene_intersection_none;\n\nSurfaceIntersection hit =  mobius_intersect(r);\nint material = portal_blue_M;\nif (first) { material = portal_orange_M; }\nfloat y = abs(hit.v);\nfloat black = border_size_u * black_border_size_u/2.;\nif (y > 1. - black || y < 1. - border_size_u + black) {\n  material = solid_black_M;\n}\nif (abs(hit.v) < 1. - border_size_u) {\n  if (teleport_light_u == 1) {\n    material = TELEPORT;\n  } else {\n    material = gray_grid_M;\n  }\n}\nreturn SceneIntersection(material, hit, false);")),in_subspace:Normal),"mobuis portal"),(7):Named(Complex(kind:Simple(Some(((15)))),intersect:(("return intersect_box(r, room_red_M);")),in_subspace:Normal),"box_r"),(8):Named(Complex(kind:Simple(Some(((16)))),intersect:(("return intersect_box(r, room_blue_M);")),in_subspace:Normal),"box_b"),(9):Named(Complex(kind:Simple(Some(((23)))),intersect:(("if (enable_object_u == 0) return scene_intersection_none;\n\nSceneIntersection result = object_intersect(r);\nif (!result.hit.hit) return scene_intersection_none;\n\nvec4 pos_absolute = object_mat * (r.o + r.d * result.hit.t);\n\nvec4 ray_o = object_vector_mat * vec4(0., 0., 0., 1.);\r\nvec4 ray_d = normalize(pos_absolute - ray_o);\r\nRay r2 = Ray(ray_o, ray_d, 1.0, false);\r\n\nRay r_mob = transform(mobius_a_final_mat_inv, r2);\nfloat len_mob = length(r_mob.d.xyz);\nr_mob.d = normalize(r_mob.d);\nSurfaceIntersection hit_mob = mobius_intersect(r_mob);\r\nhit_mob.t /= len_mob;\n\nfloat obj_t = length(pos_absolute - ray_o);\n\nif (hit_mob.t < obj_t) return scene_intersection_none;\n\nreturn result;")),in_subspace:Normal),"object"),(10):Named(Complex(kind:Simple(Some(((24)))),intersect:(("if (enable_object_u == 0) return scene_intersection_none;\n\nSceneIntersection result = object_intersect(r);\nif (!result.hit.hit) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * result.hit.t;\nvec4 pos_absolute = object_teleported_mat * pos;\n\nvec4 ray_o = object_vector_teleported_mat * vec4(0., 0., 0., 1.);\r\nvec4 ray_d = normalize(pos_absolute-ray_o);\r\nRay r2 = Ray(ray_o, ray_d, 1.0, false);\r\n\nRay r_mob = transform(mobius_b_final_mat_inv, r2);\nfloat len_mob = length(r_mob.d);\nr_mob.d = normalize(r_mob.d);\nSurfaceIntersection hit_mob = mobius_intersect(r_mob);\r\nhit_mob.t /= len_mob;\n\nfloat obj_t = length(pos_absolute - ray_o);\n\nif (hit_mob.t > obj_t) return scene_intersection_none;\n\nreturn result;")),in_subspace:Normal),"object_teleported"),(11):Named(Complex(kind:Simple(Some(((27)))),intersect:(("if (enable_object_u == 0) return scene_intersection_none;\n\nfloat radius = 0.03;\r\n\r\nSurfaceIntersection hit = intersection_none;\r\nSceneIntersection i = SceneIntersection(0, hit, false);\r\n\r\nhit = cap(r, vec3(0., 0., 0.), vec3(1., 0., 0.), radius);\r\nif (nearer(i, hit)) {\r\n  i.material = DEBUG_RED;\r\n  i.hit = hit;\r\n}\r\n\nhit = cap(r, vec3(1., 0., 0.), vec3(0.9, 0., -0.1), radius);\r\nif (nearer(i, hit)) {\r\n  i.material = DEBUG_RED;\r\n  i.hit = hit;\r\n}\r\n\nhit = cap(r, vec3(1., 0., 0.), vec3(0.9, 0.0, 0.1), radius);\r\nif (nearer(i, hit)) {\r\n  i.material = DEBUG_RED;\r\n  i.hit = hit;\r\n}\r\n\r\nhit = cap(r, vec3(0., -0.2, 0.), vec3(0., 0.2, 0.), radius);\r\nif (nearer(i, hit)) {\r\n  i.material = DEBUG_GREEN;\r\n  i.hit = hit;\r\n}\r\n\r\nhit = cap(r, vec3(0., 0., -0.2), vec3(0., 0., 0.2), radius);\r\nif (nearer(i, hit)) {\r\n  i.material = DEBUG_BLUE;\r\n  i.hit = hit;\r\n}\r\n\r\nreturn i;")),in_subspace:Normal),"object_vector")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11)]),cameras:(ids:(available:[],max:4),storage:{(0):Named((look_at:MatrixCenter(Some(((21)))),alpha:-1.029024074524641,beta:0.919999514237046,r:3.5),"mobius_a_mul"),(1):Named((look_at:MatrixCenter(Some(((22)))),alpha:-1.029024074524641,beta:0.919999514237046,r:3.5),"mobius_b_mul"),(2):Named((look_at:MatrixCenter(Some(((13)))),alpha:-1.188503501296042,beta:0.78699946656823,r:4.658500000000003),"mobius_a"),(3):Named((look_at:MatrixCenter(Some(((14)))),alpha:-2.004887760728597,beta:0.8394993424415577,r:4.658500000000003),"mobius_b")},storage_order:[(0),(1),(2),(3)]),textures:(ids:(available:[],max:0),storage:{},storage_order:[]),materials:(ids:(available:[],max:11),storage:{(0):Named(Simple(color:(0.7647179,0.7024815,0.061205085),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_yellow"),(1):Named(Simple(color:(0.2823529411764706,0.2823529411764706,0.2823529411764706),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_black"),(2):Named(Simple(color:(0.8458183,0.07454156,0.07454156),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_red"),(3):Named(Simple(color:(0.5254901960784314,0.5254901960784314,0.5254901960784314),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_gray"),(4):Named(Simple(color:(0.116810285,0.26798066,0.9083436),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_blue"),(5):Named(Simple(color:(0.15478948,0.73873776,0.2186588),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_green"),(6):Named(Simple(color:(0.03557645,0.6446965,0.79122156),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_blue"),(7):Named(Simple(color:(0.9317271,0.42666554,0.051948573),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_orange"),(8):Named(Simple(color:(0.64001256,0.64001256,0.64001256),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"gray_grid"),(9):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black"),(10):Named(Simple(color:(0.9254901960784314,0.9254901960784314,0.9254901960784314),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_white")},storage_order:[(0),(2),(1),(3),(4),(5),(6),(7),(8),(9),(10)]),intersection_materials:(ids:(available:[],max:0),storage:{},storage_order:[]),library:(ids:(available:[],max:4),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("vec2 two_lines_nearest_points(Ray a, Ray b) {\r\n    vec3 n = cross(a.d.xyz, b.d.xyz);\r\n    vec3 n1 = cross(a.d.xyz, n);\r\n    vec3 n2 = cross(b.d.xyz, n);\r\n    return vec2(\r\n        dot(b.o.xyz-a.o.xyz, n2)/dot(a.d.xyz, n2),\r\n        dot(a.o.xyz-b.o.xyz, n1)/dot(b.d.xyz, n1)\r\n    );\r\n}\r\n\r\nfloat project(vec3 a, vec3 to) {\r\n    return dot(a, to) / dot(to, to);\r\n}\r\n\r\nvec3 projection(vec3 a, vec3 to) {\r\n    return to * project(a, to);\r\n}\r\n\r\nfloat clamp_mod(float a, float max) {\r\n    a = max + mod(a, max);\r\n    if (a < 0.) {\r\n        a += max;\r\n    }\r\n    if (a > max) {\r\n        a -= max;\r\n    }\r\n    return a;\r\n}\r\n\r\nfloat clamp_angle(float a) {\r\n    return clamp_mod(a, 2. * PI);\r\n}\r\n\r\nvec3 mobius_o(float u) {\r\n    return vec3(cos(u), 0, sin(u));\r\n}\r\n\r\nvec3 mobius_d(float u) {\r\n    return vec3(cos(u/2.)*cos(u), sin(u/2.), cos(u/2.)*sin(u))/2.; // mobius\r\n}\r\n\r\nvec3 mobius_step(float u, Ray r) {\r\n    Ray l = Ray(vec4(mobius_o(u), 1.), vec4(mobius_d(u), 0.), 1.0, false);\r\n    vec2 ts = two_lines_nearest_points(l, r);\r\n\r\n    vec3 lnearest = (l.o + l.d * ts.x).xyz;\r\n    vec3 rnearest = (r.o + r.d * ts.y).xyz;\r\n    \r\n    float distance = length(lnearest - rnearest);\r\n\r\n    if (abs(ts.x) > 1.) {\r\n        distance *= 2.0 * abs(ts.x);\r\n    }\r\n\r\n    if (ts.y < 0.) {\r\n        distance *= 4.0 * abs(ts.y);\r\n    }\r\n\r\n    return vec3(distance, ts.x, ts.y); // distance, v, t\r\n}\r\n\r\nvec3 mobius_d1(float v, float u) {\r\n    float a = sin(u/2.);\r\n    float b = cos(u/2.);\r\n    float c = sin(u);\r\n    float d = cos(u);\r\n    return vec3(\r\n        b*d/2., \r\n        b*c/2., \r\n        a/2.\r\n    );\r\n}\r\n\r\nvec3 mobius_d2(float v, float u) {\r\n    float a = sin(u/2.);\r\n    float b = cos(u/2.);\r\n    float c = sin(u);\r\n    float d = cos(u);\r\n    return vec3(\r\n        -(0.25*v*a*d+0.5*v*c*b+c), \r\n        -(0.25*(v*a*c-2.*d*(v*b+2.))), \r\n        0.25*v*b\r\n    );\r\n}\r\n\r\nstruct SearchResult {\r\n    float t;\r\n    float u;\r\n    float v;\r\n};\r\n\r\nSearchResult mobius_best_approx(float u, Ray r, float eps_newton, SearchResult best) {\r\n    float eps_der = mobius_derivative_step_u;\r\n\r\n    vec3 step = mobius_step(u, r);\r\n    int count = 10; \r\n    for (int k = 0; k < 10; k++) { if (k >= count) break; // !FOR_NUMBER!\r\n    for (int k = 0; k < count; k++) { // !FOR_VARIABLE!\r\n        if (step.x < eps_newton) {\r\n            break;\r\n        }\r\n        float du = -step.x/(mobius_step(u + eps_der, r).x - step.x)*eps_der;\r\n        u = clamp_angle(u + du);\r\n        step = mobius_step(u, r);\r\n        if (best.t > 0. && abs(u-best.u) < 0.01) {\r\n            return SearchResult(-1., 0., 0.);\r\n        }\r\n    }\r\n\r\n    if (step.x < eps_newton) {\r\n        return SearchResult(step.z, u, step.y);    \r\n    } else {\r\n        return SearchResult(-1., 0., 0.);\r\n    }\r\n}\r\n\r\nSearchResult update_best_approx(SearchResult best, SearchResult current) {\r\n    if (current.t > 0. && (current.v > -1. && current.v < 1.)) {\r\n        if (best.t < 0.) {\r\n            best = current;\r\n        } else {\r\n            if (current.t < best.t) {\r\n                best = current;\r\n            }\r\n        }\r\n    }\r\n    return best;\r\n}\r\n\r\nSearchResult mobius_find_best(Ray r) {\r\n    SearchResult best = SearchResult(-1., 0., 0.);\r\n    best = update_best_approx(best, mobius_best_approx(0., r, 0.0001, best));\r\n    best = update_best_approx(best, mobius_best_approx(PI, r, 0.0001, best));\r\n    int count1 = 2; \r\n    for (int i = 0; i < 2; i++) { if (i >= count1) break; // !FOR_NUMBER!\r\n    for (int i = 0; i < count1; i++) { // !FOR_VARIABLE!\r\n        float u = float(i*2 + 1)/4. * 2. * PI;\r\n        best = update_best_approx(best, mobius_best_approx(u, r, 0.0001, best));\r\n    }\r\n    int count2 = 4; \r\n    for (int i = 0; i < 4; i++) { if (i >= count2) break; // !FOR_NUMBER!\r\n    for (int i = 0; i < count2; i++) { // !FOR_VARIABLE!\r\n        float u = float(i*2 + 1)/8. * 2. * PI;\r\n        best = update_best_approx(best, mobius_best_approx(u, r, 0.0001, best));\r\n    }\r\n    if (best.t < 0.) {\r\n        return best;\r\n    }\r\n    best = update_best_approx(best, mobius_best_approx(float(8 - 1)/16. * 2. * PI, r, 0.0001, best));\r\n    best = update_best_approx(best, mobius_best_approx(float(8 + 1)/16. * 2. * PI, r, 0.0001, best));\r\n    return best;\r\n}\r\n\r\nbool intersect_mobius_sphere(Ray r) {\r\n    vec3 op = -r.o.xyz;\r\n    float b = dot(op, r.d.xyz);\r\n    float det = b * b - dot(op, op) + 2.4055; // 1.55²\r\n    return det >= 0.;\r\n}\r\n\r\nSurfaceIntersection mobius_intersect(Ray r) {\r\n    if (intersect_mobius_sphere(r)) {\r\n        SearchResult best = mobius_find_best(r);\r\n        if (best.t >= 0.) {\r\n            vec3 normal = normalize_normal(cross(mobius_d1(best.v, best.u), mobius_d2(best.v, best.u)), r.d.xyz);\r\n            return SurfaceIntersection(true, best.t, best.u, best.v, normal);\r\n        }\r\n    }\r\n\r\n    return intersection_none;\r\n}")),"mobius"),(2):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box"),(3):Named((("SceneIntersection object_intersect(Ray r) {\r\n\tvec3 op = -r.o.xyz;\r\n\tfloat b = dot(op, r.d.xyz);\r\n\tfloat det = b*b - dot(op, op) + 0.04;\r\n\tif (det < 0.) return scene_intersection_none;\r\n\r\n\tdet = sqrt(det);\r\n\tfloat t = b - det;\r\n\tif (t < 0.) t = b + det;\r\n\tif (t < 0.) return scene_intersection_none;\r\n\r\n\tvec4 pos = r.o + r.d * t;\r\n\tvec3 n = normalize(pos.xyz);\r\n\r\n\tfloat u = atan(pos.z, pos.x);\r\n\tfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\r\n\r\n\treturn SceneIntersection(gray_grid_M, SurfaceIntersection(true, t, u, v, n), false);\r\n}")),"object")},storage_order:[(0),(1),(2),(3)]),animations_filters:(uniforms:({((6)):true,((14)):false,((8)):false,((7)):false,((16)):true,((2)):false,((15)):true,((0)):false,((1)):false}),matrices:({((27)):true,((23)):false,((13)):true,((24)):false,((29)):false,((28)):false,((14)):true,((21)):true,((22)):true,((30)):false,((0)):false}),cameras:({((0)):true,((2)):true,((3)):true,((1)):true})),elements_descriptions:(uniforms:({((15)):(help_description:None,overrided_name:"Move object"),((16)):(help_description:None,overrided_name:""),((6)):(help_description:None,overrided_name:"Teleport light")}),matrices:({((14)):(help_description:None,overrided_name:"Blue portal position"),((13)):(help_description:None,overrided_name:"Orange portal position"),((27)):(help_description:None,overrided_name:"Object movement vector"),((22)):(help_description:None,overrided_name:""),((21)):(help_description:None,overrided_name:"")}),cameras:({((2)):(help_description:None,overrided_name:"Look at orange portal"),((0)):(help_description:None,overrided_name:"Red world"),((3)):(help_description:None,overrided_name:"Look at blue portal"),((1)):(help_description:None,overrided_name:"Blue world")})),user_uniforms:(uniforms:({((6)):true,((16)):false,((8)):false,((14)):false,((15)):false,((2)):false,((1)):false,((0)):false,((7)):false}),matrices:({((28)):false,((29)):false,((22)):false,((0)):false,((23)):false,((13)):false,((24)):false,((21)):false,((30)):false,((14)):false,((27)):false})),animation_stages:(ids:(available:[],max:6),storage:{(0):Named((name:(eng:"Two worlds",rus:"Два мира"),description:Some((eng:"Möbius portal can connect two different worlds, like regular portals do. Here different worlds is represented using rooms with different colors. You can switch between them.",rus:"Как и обычный портал, портал Мёбиуса может связывать два мира. Здесь разные миры представлены комнатами с разными цветами. Вы можете переключаться между разными мирами.")),uniforms:({((2)):FromDev,((1)):FromDev,((0)):FromDev,((7)):FromDev,((8)):FromDev,((15)):FromDev,((6)):ProvidedToUser,((16)):Changed(Some(((21)))),((14)):FromDev}),matrices:({((28)):FromDev,((23)):FromDev,((13)):ChangedAndToUser(Some(((17)))),((30)):FromDev,((14)):ChangedAndToUser(Some(((18)))),((27)):FromDev,((24)):FromDev,((22)):Changed(Some(((26)))),((21)):Changed(Some(((25)))),((0)):FromDev,((29)):FromDev}),original_cam_button:false,set_cam:Some(Some(((0)))),cams:{((1)):true,((3)):false,((2)):false,((0)):true}),"two worlds"),(1):Named((name:(eng:"One world",rus:"Один мир"),description:Some((eng:"But also portals can be in one universe, even against each other creating infinite portal corridor. You can move portals as you wish to better understand how them works.",rus:"Но так же порталы могут находиться в одной вселенной, и даже друг напротив друга, образуя бесконечный портальный коридор. Вы можете перемещать порталы как хотите чтобы лучше понять как они работают.")),uniforms:({((7)):FromDev,((14)):FromDev,((15)):FromDev,((8)):FromDev,((0)):FromDev,((2)):FromDev,((1)):FromDev,((6)):ProvidedToUser,((16)):Changed(Some(((22))))}),matrices:({((24)):FromDev,((13)):ChangedAndToUser(Some(((19)))),((23)):FromDev,((22)):FromDev,((14)):ChangedAndToUser(Some(((20)))),((0)):FromDev,((29)):FromDev,((30)):FromDev,((28)):FromDev,((21)):FromDev,((27)):FromDev}),original_cam_button:true,set_cam:None,cams:{((1)):false,((0)):false,((2)):true,((3)):true}),"one world"),(2):Named((name:(eng:"With object 1",rus:"С объектом 1"),description:None,uniforms:({((1)):FromDev,((14)):FromDev,((16)):Changed(Some(((17)))),((0)):FromDev,((15)):ProvidedToUser,((2)):FromDev,((6)):FromDev,((8)):FromDev,((7)):FromDev}),matrices:({((14)):FromDev,((29)):FromDev,((30)):FromDev,((21)):FromDev,((0)):FromDev,((23)):FromDev,((24)):FromDev,((28)):FromDev,((27)):Changed(Some(((32)))),((22)):FromDev,((13)):FromDev}),original_cam_button:true,set_cam:None,cams:{((3)):true,((0)):false,((2)):true,((1)):false}),"with object 1"),(3):Named((name:(eng:"With object, explore",rus:"С объетом, исследование"),description:None,uniforms:({((15)):ProvidedToUser,((7)):FromDev,((14)):FromDev,((16)):Changed(Some(((18)))),((6)):FromDev,((2)):FromDev,((0)):FromDev,((1)):FromDev,((8)):FromDev}),matrices:({((27)):ProvidedToUser,((30)):FromDev,((29)):FromDev,((22)):FromDev,((0)):FromDev,((28)):FromDev,((21)):FromDev,((23)):FromDev,((24)):FromDev,((14)):ProvidedToUser,((13)):ProvidedToUser}),original_cam_button:false,set_cam:None,cams:{((2)):true,((0)):false,((1)):false,((3)):true}),"with object explore"),(4):Named((name:(eng:"With object 2",rus:"С объектом 2"),description:None,uniforms:({((15)):ProvidedToUser,((6)):FromDev,((0)):FromDev,((16)):Changed(Some(((19)))),((1)):FromDev,((7)):FromDev,((8)):FromDev,((14)):FromDev,((2)):FromDev}),matrices:({((21)):FromDev,((14)):FromDev,((13)):FromDev,((29)):FromDev,((24)):FromDev,((28)):FromDev,((30)):FromDev,((23)):FromDev,((0)):FromDev,((27)):Changed(Some(((33)))),((22)):FromDev}),original_cam_button:true,set_cam:None,cams:{((3)):true,((0)):false,((2)):true,((1)):false}),"with object 2"),(5):Named((name:(eng:"With object 3",rus:"С объектом 3"),description:None,uniforms:({((16)):Changed(Some(((20)))),((8)):FromDev,((0)):FromDev,((7)):FromDev,((14)):FromDev,((1)):FromDev,((15)):ProvidedToUser,((2)):FromDev,((6)):FromDev}),matrices:({((13)):FromDev,((28)):FromDev,((23)):FromDev,((27)):Changed(Some(((34)))),((22)):FromDev,((14)):FromDev,((30)):FromDev,((0)):FromDev,((29)):FromDev,((24)):FromDev,((21)):FromDev}),original_cam_button:true,set_cam:None,cams:{((0)):false,((3)):true,((2)):true,((1)):false}),"with object 3")},storage_order:[(0),(1),(2),(4),(5),(3)]),current_stage:Some(((1))),dev_stage:(uniforms:({((15)):Float((min:Some(0),max:Some(5),value:0.45)),((7)):Progress(0.2),((16)):Bool(false),((0)):Float((min:Some(0),max:None,value:6)),((2)):Float((min:Some(0),max:None,value:6)),((1)):Float((min:Some(0),max:None,value:4)),((14)):Progress(0.42),((6)):Bool(true),((8)):Formula(("0.000005"))}),matrices:({((27)):Simple(offset:(0,1,0),scale:1,rotate:(0,2.7401669256310974,5.8643062867009474),mirror:(false,false,false)),((14)):Simple(offset:(2.4,0,0),scale:1,rotate:(0,0,1.5707963267948966),mirror:(false,false,false)),((30)):Teleport(first_portal:Some(((28))),second_portal:Some(((29))),what:Some(((27)))),((23)):Mul(to:Some(((31))),what:Some(((27)))),((13)):Simple(offset:(-2.4,0,0),scale:1,rotate:(0,0,1.5707963267948966),mirror:(false,false,false)),((22)):Simple(offset:(-0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((24)):Teleport(first_portal:Some(((28))),second_portal:Some(((29))),what:Some(((23)))),((28)):Mul(to:Some(((13))),what:Some(((21)))),((29)):Mul(to:Some(((14))),what:Some(((22)))),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((21)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false))})),use_time:false)