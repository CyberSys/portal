(desc:(eng:"Similarly to triangle tiling, it\'s possible to create square tiling. And this can be done at least two ways. To understand how each variant works, it\'s recommended to disable teleportation of the light.",rus:"Аналогично треугольному замощению, из порталов можно собрать квадратное замощение. И сделать это можно минимум двумя способами, которые представлены здесь. Чтобы понять как расположены порталы во втором случае, советую отключить телепортацию света."),cam:(look_at:(0,0,0),alpha:-83.90489489363266,beta:1.0639766931533807,r:3.558410273836877,offset_after_material:0.000025),uniforms:(ids:(available:[],max:39),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Progress(0),"portal_black_color_progress"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(9):Named(Formula(("if(progress == 0, 0.001, 0)+on(progress, 0., 0.8)")),"x_offset"),(10):Named(Formula(("pi()-pi() * on(progress, 0.3, 0.75)")),"rotation"),(11):Named(Formula(("1.3*h*(1-on(progress, 0.8, 1.0))")),"y_offset"),(12):Named(Progress(1),"progress"),(13):Inline(Formula(("rotation"))),(14):Inline(Formula(("-x_offset"))),(15):Inline(Formula(("y_offset"))),(16):Named(Float((min:Some(0),max:None,value:0.3)),"h"),(17):Inline(Formula(("x_offset"))),(18):Inline(Formula(("2.3*h*y_offset"))),(19):Inline(Formula(("2.3*h*y_offset"))),(20):Inline(Formula(("y_offset"))),(21):Inline(Formula(("rotation"))),(22):Inline(Formula(("x_offset"))),(23):Inline(Formula(("-x_offset"))),(24):Inline(Formula(("pi()-rotation"))),(25):Inline(Formula(("pi()-rotation"))),(26):Inline(Formula(("-y_offset"))),(27):Inline(Formula(("-y_offset"))),(28):Inline(Formula(("-x_offset"))),(29):Inline(Formula(("-y_offset"))),(30):Named(Bool(true),"is_first_scene"),(31):Named(Bool(true),"disable_sides"),(32):Inline(Bool(true)),(33):Inline(Bool(false)),(34):Inline(Bool(true)),(35):Inline(Bool(true)),(36):Inline(Bool(false)),(37):Inline(Bool(true)),(38):Inline(Progress(1))},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(11),(12),(16),(30),(31)]),matrices:(ids:(available:[],max:26),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Inline(Mul(to:Some(((18))),what:Some(((17))))),(14):Inline(Mul(to:Some(((20))),what:Some(((19))))),(15):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((27)))),z:Yes(Some(((22))))),rotate:(x:Yes(Some(((25)))),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(16):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((29)))),z:Yes(Some(((28))))),rotate:(x:Yes(Some(((24)))),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(17):Inline(Parametrized(offset:(x:Yes(Some(((14)))),y:Yes(Some(((15)))),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(18):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:Yes(Some(((13)))),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(19):Inline(Parametrized(offset:(x:Yes(Some(((17)))),y:Yes(Some(((20)))),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(20):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:Yes(Some(((21)))),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(21):Inline(Simple(offset:(-1,0,0),scale:1,rotate:(0,1.5707963267948966,0),mirror:(false,false,false))),(22):Inline(Simple(offset:(0,0,1),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(23):Inline(Simple(offset:(0,0,-1),scale:1,rotate:(0,0,0),mirror:(false,false,false))),(24):Inline(Simple(offset:(1,0,0),scale:1,rotate:(0,1.5707963267948966,0),mirror:(false,false,false))),(25):Named(Simple(offset:(0.66,0,0.66),scale:0.15,rotate:(0,0,0),mirror:(false,false,false)),"user_object")},storage_order:[(0),(25)]),objects:(ids:(available:[],max:11),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);")),in_subspace:Normal),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);")),in_subspace:Normal),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);")),in_subspace:Normal),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);")),in_subspace:Normal),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);")),in_subspace:Normal),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);")),in_subspace:Normal),"room_z-"),(6):Named(Flat(kind:Portal(Some(((13))),Some(((14)))),is_inside:(("if (is_first_scene_u == 0) return NOT_INSIDE;\n\nif (disable_sides_u == 1 && abs(x) > 1.) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  rect_distance(x, y, 1., h_u),\n  1.0,\n  0.05,\n  0.01,\n  portal_blue_M,\n  portal_blue_M,\n  solid_2_M,\n  solid_2_M,\n  back,\n  first\n);")),in_subspace:Normal),"portals1"),(7):Named(Flat(kind:Portal(Some(((15))),Some(((16)))),is_inside:(("if (is_first_scene_u == 0) return NOT_INSIDE;\n\nif (disable_sides_u == 1 && abs(x) > 1.) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  rect_distance(x, y, 1., h_u),\n  1.0,\n  0.05,\n  0.01,\n  portal_blue_M,\n  portal_blue_M,\n  solid_0_M,\n  solid_0_M,\n  back,\n  first\n);")),in_subspace:Normal),"portals2"),(8):Named(Flat(kind:Portal(Some(((21))),Some(((22)))),is_inside:(("if (is_first_scene_u == 1) return NOT_INSIDE;\n\nif (abs(x) > 1.) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  rect_distance(x, y, 1., h_u),\n  1.0,\n  0.05,\n  0.01,\n  portal_orange_M,\n  portal_orange_M,\n  solid_2_M,\n  solid_2_M,\n  back,\n  first\n);")),in_subspace:Normal),"portals3"),(9):Named(Flat(kind:Portal(Some(((23))),Some(((24)))),is_inside:(("if (is_first_scene_u == 1) return NOT_INSIDE;\n\nif (abs(x) > 1.) return NOT_INSIDE;\n\nreturn is_inside_portal(\n  rect_distance(x, y, 1., h_u),\n  1.0,\n  0.05,\n  0.01,\n  portal_orange_M,\n  portal_orange_M,\n  solid_0_M,\n  solid_0_M,\n  back,\n  first\n);")),in_subspace:Normal),"portals4"),(10):Named(Complex(kind:Simple(Some(((25)))),intersect:(("if (disable_sides_u == 0) return scene_intersection_none;\n\nvec3 op = -r.o.xyz;\nfloat b = dot(op, r.d.xyz);\nfloat det = b*b - dot(op, op) + 1.0;\nif (det < 0.) return scene_intersection_none;\n\ndet = sqrt(det);\nfloat t = b - det;\nif (t < 0.) t = b + det;\nif (t < 0.) return scene_intersection_none;\n\nvec4 pos = r.o + r.d * t;\nvec3 n = normalize(pos.xyz);\n\nfloat u = atan(pos.z, pos.x);\nfloat v = atan(sqrt(pos.x * pos.x + pos.z * pos.z), pos.y);\n\nreturn SceneIntersection(grid_gray_M, SurfaceIntersection(true, t, u, v, n), false);")),in_subspace:Normal),"object")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(10)]),cameras:(ids:(available:[],max:2),storage:{(0):Named((look_at:Coordinate((0,0,0)),alpha:-74.52280644463116,beta:1.0183481371402736,r:2.9408349370552282,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)),"view from outside"),(1):Named((look_at:Coordinate((0,0,0)),alpha:-74.97450182961049,beta:1.3670370757579802,r:0.36126973096201903,in_subspace:false,free_movement:false,matrix:(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)),"view from inside")},storage_order:[(0),(1)]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:22),storage:{(0):Named(Simple(color:(0.8980392156862745,0.8313725490196079,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_yellow"),(1):Named(Simple(color:(0.050980392156862744,0.050980392156862744,0.050980392156862744),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_black"),(2):Named(Simple(color:(0.9058823529411765,0.29411764705882354,0.29411764705882354),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_red"),(3):Named(Simple(color:(0.2235294117647059,0.2235294117647059,0.2235294117647059),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_gray"),(4):Named(Simple(color:(0.3137254901960784,0.38823529411764707,0.9254901960784314),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_blue"),(5):Named(Simple(color:(0.2627450980392157,0.8470588235294118,0.30196078431372547),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3,grid2:false,grid3:true),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:true,grid3:false),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:true,grid3:false),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:true,grid3:false),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3,grid2:true,grid3:false),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple2(hit, r, vec3(2.627450980392157e-1, 8.470588235294118e-1, 3.0196078431372547e-1), 5e-1, true, 1.0, 3e-1, false, true);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple2(hit, r, vec3(3.137254901960784e-1, 3.8823529411764707e-1, 9.254901960784314e-1), 5e-1, true, 1.0, 3e-1, false, true);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3,grid2:false,grid3:false),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black"),(21):Named(Simple(color:(0.25098039215686274,0.23529411764705882,0.23529411764705882),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3,grid2:false,grid3:false),"grid_blackish")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14),(21)]),intersection_materials:(ids:(available:[],max:0),storage:{},storage_order:[]),library:(ids:(available:[],max:4),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)), false);\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}")),"portal")},storage_order:[(2),(0),(1),(3)]),animations_filters:(uniforms:({((9)):false,((1)):false,((8)):false,((11)):false,((6)):false,((31)):true,((7)):true,((30)):true,((12)):true,((16)):true,((2)):false,((10)):false,((0)):false}),matrices:({((0)):false,((25)):true}),cameras:({((1)):true,((0)):true})),elements_descriptions:(uniforms:({((12)):(help_description:None,overrided_name:"Progress"),((16)):(help_description:None,overrided_name:"Height"),((30)):(help_description:None,overrided_name:""),((31)):(help_description:None,overrided_name:""),((7)):(help_description:None,overrided_name:"Teleport light")}),matrices:({((25)):(help_description:None,overrided_name:"Object")}),cameras:({((1)):(help_description:None,overrided_name:"View from inside"),((0)):(help_description:None,overrided_name:"View from outside")})),user_uniforms:(uniforms:({((2)):false,((10)):false,((1)):false,((9)):false,((0)):false,((16)):false,((6)):false,((11)):false,((8)):false,((30)):false,((12)):false,((31)):false,((7)):true}),matrices:({((25)):false,((0)):false})),animation_stages:(ids:(available:[],max:3),storage:{(0):Named((name:(eng:"Build first kind",rus:"Сборка первого варианта"),description:None,uniforms:({((9)):FromDev,((2)):FromDev,((1)):FromDev,((30)):Changed(Some(((32)))),((10)):FromDev,((0)):FromDev,((12)):ProvidedToUser,((31)):Changed(Some(((33)))),((7)):FromDev,((16)):FromDev,((11)):FromDev,((6)):FromDev,((8)):FromDev}),matrices:({((25)):FromDev,((0)):FromDev}),original_cam_button:false,set_cam:None,cams:{((1)):false,((0)):false},hidden:false),"Build first"),(1):Named((name:(eng:"Explore first kind",rus:"Исследование первого варианта"),description:None,uniforms:({((11)):FromDev,((7)):FromDev,((30)):Changed(Some(((34)))),((2)):FromDev,((6)):FromDev,((16)):ProvidedToUser,((12)):Changed(Some(((38)))),((9)):FromDev,((1)):FromDev,((0)):FromDev,((8)):FromDev,((31)):Changed(Some(((35)))),((10)):FromDev}),matrices:({((25)):ProvidedToUser,((0)):FromDev}),original_cam_button:true,set_cam:None,cams:{((1)):true,((0)):true},hidden:false),"Explore first"),(2):Named((name:(eng:"Explore second kind",rus:"Исследование второго варианта"),description:None,uniforms:({((8)):FromDev,((30)):Changed(Some(((36)))),((2)):FromDev,((7)):FromDev,((1)):FromDev,((0)):FromDev,((12)):FromDev,((31)):Changed(Some(((37)))),((16)):ProvidedToUser,((6)):FromDev,((10)):FromDev,((9)):FromDev,((11)):FromDev}),matrices:({((0)):FromDev,((25)):ProvidedToUser}),original_cam_button:true,set_cam:None,cams:{((0)):true,((1)):true},hidden:false),"Explore second")},storage_order:[(0),(1),(2)]),current_stage:Animation(((1))),dev_stage:(uniforms:({((2)):Float((min:Some(0),max:None,value:4)),((6)):Progress(0),((16)):Float((min:Some(0),max:None,value:0.3)),((1)):Float((min:Some(0),max:None,value:4)),((30)):Bool(true),((31)):Bool(true),((12)):Progress(0),((9)):Formula(("if(progress == 0, 0.001, 0)+on(progress, 0., 0.8)")),((7)):Bool(true),((11)):Formula(("1.3*h*(1-on(progress, 0.8, 1.0))")),((0)):Float((min:Some(0),max:None,value:4)),((10)):Formula(("pi()-pi() * on(progress, 0.3, 0.75)")),((8)):Bool(false)}),matrices:({((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((25)):Simple(offset:(0.66,0,0.66),scale:0.15,rotate:(0,0,0),mirror:(false,false,false))})),animations:(ids:(available:[],max:0),storage:{},storage_order:[]),use_time:false,skybox:None)